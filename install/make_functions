#
# Copy contents of specified directory
#
install_dir ()
{
    install_dir_source=$1
    install_dir_target=$2
    install_dir_dir=$3

    if [ -d ${install_dir_source} ]
    then
      mkdir -p ${install_dir_target}/${install_dir_dir}
      cp ${install_dir_source}/* ${install_dir_target}/${install_dir_dir}
    fi
}

#
# Copy specified file to the specified directory
#
install_bin_file ()
{
    install_bin_file_source=$1
    install_bin_file_target=$2
    install_bin_file_dir=$3
    install_bin_file_file=$4

    if [ -d "${install_bin_file_source}" ]
    then
      mkdir -p "${install_bin_file_target}/${install_bin_file_dir}"
      if [ -f "${install_bin_file_source}/${install_bin_file_file}" ]
      then
        printf "*       copy ${install_bin_file_file} ... "
        cp "${install_bin_file_source}/${install_bin_file_file}" "${install_bin_file_target}/${install_bin_file_dir}"
        echo "Ready"
      else
        echo "* ##    file ${install_bin_file_file} not found"
      fi
    else
      echo "* ##     non-existent ${install_bin_file_source}"
    fi
}

#
# Copy specified file to the specified directory
#
install_lib_file ()
{
    install_lib_file_source=$1
    install_lib_file_target=$2
    install_lib_file_dir=$3
    install_lib_file_file=$4

    if [ -d ${install_lib_file_source} ]
    then
      mkdir -p ${install_lib_file_target}/${install_lib_file_dir}
      if [ -f ${install_lib_file_source}/${install_lib_file_file} ]
      then
        printf "*       copy ${install_lib_file_file} ... "
        cp ${install_lib_file_source}/${install_lib_file_file} ${install_lib_file_target}/${install_lib_file_dir}
        echo "Ready"
      else
        echo "* ##    file ${install_lib_file_file} not found"
      fi
    else
      echo "* ##     non-existent ${install_lib_file_source}"
    fi
}


#
# Copy specified file with correct line endings
#
install_ascii_file()
{
    install_ascii_file_source_file="$1"
    install_ascii_file_target_dir="$2"
    install_ascii_file_target_file="$3"
    install_ascii_file_source_file_may_not_exist="$4"

    if [ "aap${install_ascii_file_target_file}" = "aap" ]
    then
        install_ascii_file_target_file=`basename ${install_ascii_file_source_file}`
    fi

    if [ "$install_ascii_file_source_file_may_not_exist" != "nocheck" ]
    then
        if [ -d ${install_ascii_file_target_dir} ]
        then
            if [ -f "${install_ascii_file_source_file}" ]
            then
                printf "*                 copy ${install_ascii_file_source_file} ... "
                cp -p ${install_ascii_file_source_file} ${install_ascii_file_target_dir}/${install_ascii_file_target_file}
                if [ -n "${TXTFILE_CONVERTER}" ]
                then
                    ${TXTFILE_CONVERTER} ${install_ascii_file_target_dir}/${install_ascii_file_target_file} >& /dev/null
                fi
                echo "Ready"
            else
                echo "* ##    file ${install_ascii_file_source_file} not found"
            fi
        else
            echo "* ##    ${install_ascii_file_target_dir} does not exist"
        fi
    elif [ -f ${install_ascii_file_source_file} ]
    then
        printf "*                 copy ${install_ascii_file_source_file} ... "
        cp -p ${install_ascii_file_source_file} ${install_ascii_file_target_dir}/${install_ascii_file_target_file}
        if [ -n "${TXTFILE_CONVERTER}" ]
        then
            ${TXTFILE_CONVERTER} ${install_ascii_file_target_dir}/${install_ascii_file_target_file} >& /dev/null
        fi
        echo "Ready"
    fi
}

install_ascii_fileset()
{
    install_ascii_fileset_var=$1
    install_ascii_fileset_target_dir=$2

    echo "*             File set copy ${install_ascii_fileset_var} ... "
    for i in ${install_ascii_fileset_var}
    do
        install_ascii_file $i ${install_ascii_fileset_target_dir}
    done
    if [ -n "${TXTFILE_CONVERTER}" ]
    then
        ${TXTFILE_CONVERTER} $install_ascii_fileset_target_dir/* >& /dev/null
    fi
    echo "*             Ready"

}

#gv patch_cs_project
# This script patches the C# Assembly Name and version to C# project
patch_cs_project()
{
    EXAMPLE_CS_PATH=$1
    if [ "${INCLUDE_CS}" = "yes" -a "${target}" = "x86.win32" ]
    then
        echo "*      Patching C# Assembly Name and Version to Visual Studio Project..."
        FILES=`find ${HDE_dir}/${EXAMPLE_CS_PATH} -name *.csproj`
        for f in $FILES
        do
            mv $f $f.orig
            sed -e "s/__CS_ASSEMBLY_NAME__/${CS_ASSEMBLY_NAME}/g" \
                -e "s/__CS_DLL_VERSION__/${CS_DLL_VERSION}/g" \
                $f.orig > $f
            rm $f.orig
        done
        echo "*      Patching of C# projects done..."
    fi
}

# oall install_example
# TODO manage all languages
install_example()
{
    EXAMPLE_NAME="$1"
    echo "*           For ${EXAMPLE_NAME}... "

    EXAMPLE_ROOT_PATH=examples/dcps/${EXAMPLE_NAME}
    mkdir -p ${HDE_dir}/${EXAMPLE_ROOT_PATH}

    if [ -f "${OSPL_HOME}/${EXAMPLE_ROOT_PATH}/README.html" ]
    then
        install_ascii_file "${OSPL_HOME}/${EXAMPLE_ROOT_PATH}/README.html" \
            ${HDE_dir}/${EXAMPLE_ROOT_PATH}
    fi

    EXAMPLE_IDL_PATH=${EXAMPLE_ROOT_PATH}/idl
    mkdir -p ${HDE_dir}/${EXAMPLE_IDL_PATH}

    if [ -f "${OSPL_HOME}/${EXAMPLE_IDL_PATH}/${EXAMPLE_NAME}Data.idl" ]
    then
    install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_IDL_PATH}/*.idl" \
        ${HDE_dir}/${EXAMPLE_IDL_PATH}
    fi

    EXAMPLE_PLATFORM=""
    EXAMPLE_JAVA_PLATFORM=""
    EXAMPLE_SCRIPTS_FOLDER_NAME=""
    EXAMPLE_BUILD_SCRIPT_NAME=""
    EXAMPLE_BUILDER_NAME=""
    EXAMPLE_JAVA_BUILDER_NAME=""
    EXAMPLE_BUILDER_NAME_ON_PRODUCT=""

    if [ "${target}" = "x86.win32" ]
    then
        EXAMPLE_PLATFORM="VS2005"
        EXAMPLE_JAVA_PLATFORM="Windows"
        EXAMPLE_BUILDER_NAME="BUILD.bat"
        EXAMPLE_BUILDER_NAME_ON_PRODUCT=${EXAMPLE_BUILDER_NAME}
        EXAMPLE_JAVA_BUILDER_NAME="BUILD.bat"
        EXAMPLE_SCRIPTS_FOLDER_NAME="Bat"
        EXAMPLE_RUN_SCRIPT_NAME="RUN.bat"
    else
        EXAMPLE_PLATFORM="Posix"
        EXAMPLE_JAVA_PLATFORM="Posix"
        EXAMPLE_BUILDER_NAME="makefile_$PLATFORM_EXT"
        EXAMPLE_BUILDER_NAME_ON_PRODUCT="Makefile"
        EXAMPLE_JAVA_BUILDER_NAME="BUILD"
        EXAMPLE_SCRIPTS_FOLDER_NAME="sh"
        EXAMPLE_RUN_SCRIPT_NAME="RUN"
    fi

    ## CS
    if [ "${INCLUDE_CS}" = "yes" -a "${target}" = "x86.win32" ]
    then
        EXAMPLE_CS_PATH=${EXAMPLE_ROOT_PATH}/CS

        if [ -d ${OSPL_HOME}/${EXAMPLE_CS_PATH} ]
        then
            mkdir -p ${HDE_dir}/${EXAMPLE_CS_PATH}

            mkdir -p ${HDE_dir}/${EXAMPLE_CS_PATH}/src
            install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_CS_PATH}/src/*.cs" \
                ${HDE_dir}/${EXAMPLE_CS_PATH}/src

            # standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_CS_PATH}/Standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_CS_PATH}/Standalone/${EXAMPLE_PLATFORM}

            # First copy all the Folder's content;
            cp -r ${OSPL_HOME}/${EXAMPLE_CS_PATH}/Standalone/${EXAMPLE_PLATFORM}/* \
                    ${HDE_dir}/${EXAMPLE_CS_PATH}/Standalone/${EXAMPLE_PLATFORM}

	    #Then get rid of the builder which could bear a distinct name
            # (from the one we intend to install it with)
            rm -f ${HDE_dir}/${EXAMPLE_CS_PATH}/Standalone/${EXAMPLE_PLATFORM}/${EXAMPLE_BUILDER_NAME}

            # Then recopy the builder with the target name on the install.
            install_ascii_file "${OSPL_HOME}/${EXAMPLE_CS_PATH}/Standalone/${EXAMPLE_PLATFORM}/${EXAMPLE_BUILDER_NAME}" \
                ${HDE_dir}/${EXAMPLE_CS_PATH}/Standalone/${EXAMPLE_PLATFORM} ${EXAMPLE_BUILDER_NAME_ON_PRODUCT}
            patch_cs_project ${EXAMPLE_CS_PATH}
        fi
    fi

    ## C++
    if [ "${INCLUDE_CXX}" = "yes" ]
    then
        EXAMPLE_CPP_PATH=${EXAMPLE_ROOT_PATH}/C++

        if [ -d ${OSPL_HOME}/${EXAMPLE_CPP_PATH} ]
        then
            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}

            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}/src
            install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_CPP_PATH}/src/*.cpp" \
                ${HDE_dir}/${EXAMPLE_CPP_PATH}/src
            install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_CPP_PATH}/src/*.h" \
                ${HDE_dir}/${EXAMPLE_CPP_PATH}/src

            # standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}/Standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}/Standalone/${EXAMPLE_PLATFORM}

            # First copy all the Folder's content;
            cp -r ${OSPL_HOME}/${EXAMPLE_CPP_PATH}/Standalone/${EXAMPLE_PLATFORM}/* \
                  ${HDE_dir}/${EXAMPLE_CPP_PATH}/Standalone/${EXAMPLE_PLATFORM}

            # Then get rid of the builders which bear distinct names
            # (from the one we intend to install it with)
            rm -f ${HDE_dir}/${EXAMPLE_CPP_PATH}/Standalone/${EXAMPLE_PLATFORM}/makefile_*

            # Then recopy the builder with the target name on the install.
            install_ascii_file "${OSPL_HOME}/${EXAMPLE_CPP_PATH}/Standalone/${EXAMPLE_PLATFORM}/${EXAMPLE_BUILDER_NAME}" \
               ${HDE_dir}/${EXAMPLE_CPP_PATH}/Standalone/${EXAMPLE_PLATFORM} ${EXAMPLE_BUILDER_NAME_ON_PRODUCT} nocheck

            # Corba/OpenFusion
            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}/Corba
            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion
            mkdir -p ${HDE_dir}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion/${EXAMPLE_PLATFORM}

            cp -r ${OSPL_HOME}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion/${EXAMPLE_PLATFORM}/* \
                  ${HDE_dir}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion/${EXAMPLE_PLATFORM}

            # Then get rid of the builders which bear distinct names
            # (from the one we intend to install it with)
            rm -f ${HDE_dir}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion/${EXAMPLE_PLATFORM}/makefile_*

            install_ascii_file "${OSPL_HOME}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion/${EXAMPLE_PLATFORM}/${EXAMPLE_BUILDER_NAME}" \
                   ${HDE_dir}/${EXAMPLE_CPP_PATH}/Corba/OpenFusion/${EXAMPLE_PLATFORM} ${EXAMPLE_BUILDER_NAME_ON_PRODUCT} nocheck
        fi
    fi

    ## C
    if [ "${INCLUDE_C}" = "yes" ]
    then
        EXAMPLE_C_PATH=${EXAMPLE_ROOT_PATH}/C

        if [ -d ${OSPL_HOME}/${EXAMPLE_C_PATH} ]
        then
            mkdir -p ${HDE_dir}/${EXAMPLE_C_PATH}

            mkdir -p ${HDE_dir}/${EXAMPLE_C_PATH}/src
            install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_C_PATH}/src/*.c" \
                ${HDE_dir}/${EXAMPLE_C_PATH}/src
            install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_C_PATH}/src/*.h" \
                ${HDE_dir}/${EXAMPLE_C_PATH}/src

            # standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_C_PATH}/Standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_C_PATH}/Standalone/${EXAMPLE_PLATFORM}

            # First copy all the Folder's content;
            cp -r ${OSPL_HOME}/${EXAMPLE_C_PATH}/Standalone/${EXAMPLE_PLATFORM}/* \
                  ${HDE_dir}/${EXAMPLE_C_PATH}/Standalone/${EXAMPLE_PLATFORM}

            # Then get rid of the builders which bear distinct names
            # (from the one we intend to install it with)
            rm -f ${HDE_dir}/${EXAMPLE_C_PATH}/Standalone/${EXAMPLE_PLATFORM}/makefile_*

            # Then recopy the builder with the target name on the install.
            install_ascii_file "${OSPL_HOME}/${EXAMPLE_C_PATH}/Standalone/${EXAMPLE_PLATFORM}/${EXAMPLE_BUILDER_NAME}" \
               ${HDE_dir}/${EXAMPLE_C_PATH}/Standalone/${EXAMPLE_PLATFORM} ${EXAMPLE_BUILDER_NAME_ON_PRODUCT} nocheck
        fi
    fi

    ## Java
    if [ "${INCLUDE_JAVA}" = "yes" ]
    then
        EXAMPLE_JAVA_PATH=${EXAMPLE_ROOT_PATH}/Java

        if [ -d ${OSPL_HOME}/${EXAMPLE_JAVA_PATH} ]
        then
            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}

            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}/src
            install_ascii_fileset "${OSPL_HOME}/${EXAMPLE_JAVA_PATH}/src/*.java" \
                ${HDE_dir}/${EXAMPLE_JAVA_PATH}/src

            # standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Standalone
            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Standalone/${EXAMPLE_JAVA_PLATFORM}

            install_ascii_file "${OSPL_HOME}/${EXAMPLE_JAVA_PATH}/Standalone/${EXAMPLE_JAVA_PLATFORM}/${EXAMPLE_JAVA_BUILDER_NAME}" \
                    ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Standalone/${EXAMPLE_JAVA_PLATFORM}

            cp -r ${OSPL_HOME}/${EXAMPLE_JAVA_PATH}/Standalone/${EXAMPLE_JAVA_PLATFORM}/${EXAMPLE_SCRIPTS_FOLDER_NAME} \
                ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Standalone/${EXAMPLE_JAVA_PLATFORM}/${EXAMPLE_SCRIPTS_FOLDER_NAME}

            # Corba/JacORB
            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Corba
            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Corba/JacORB
            mkdir -p ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Corba/JacORB/${EXAMPLE_JAVA_PLATFORM}
            install_ascii_file "${OSPL_HOME}/${EXAMPLE_JAVA_PATH}/Corba/JacORB/${EXAMPLE_JAVA_PLATFORM}/${EXAMPLE_JAVA_BUILDER_NAME}" \
                    ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Corba/JacORB/${EXAMPLE_JAVA_PLATFORM}

            cp -r ${OSPL_HOME}/${EXAMPLE_JAVA_PATH}/Corba/JacORB/${EXAMPLE_JAVA_PLATFORM}/${EXAMPLE_SCRIPTS_FOLDER_NAME} \
                ${HDE_dir}/${EXAMPLE_JAVA_PATH}/Corba/JacORB/${EXAMPLE_JAVA_PLATFORM}/${EXAMPLE_SCRIPTS_FOLDER_NAME}
        fi
    fi

    echo "*           Ready: ${EXAMPLE_NAME}"
}
# oall end install_example

doTar ()
{
    echo ${OSPL_BUILDER} cf ${OUT}.tar ${INSTTYPE}
    (
        cd $OSPL_HOME/install
        ${OSPL_BUILDER} cf ${OUT}.tar ${INSTTYPE}
    )
}

doZip ()
{
    echo ${OSPL_BUILDER} -r ${OUT}.zip ${INSTTYPE}
    (
        cd $OSPL_HOME/install
        ${OSPL_BUILDER} -r ${OUT}.zip ${INSTTYPE}
    )
}

doStandardPackage()
{
    PLATFORM=${SOURCE_TARGET}${TARGET_ENV}

    OUT=${OUTPUTDIR}/OpenSpliceDDS${PACKAGE_VERSION}-${PLATFORM}-${INSTTYPE}${EXTRA}
    if [ -z "${OSPL_BUILDER}" ]
    then
        # If empty try zip or tar depending upon platform
        if [ "${BUILDER_TARGET}" = "windows" ]
        then
            OSPL_BUILDER=`which zip`
            if [ "$?" != "0" ]
            then
                echo "Error - No packager found please set OSPL_BUILDER"
                return 1
            else
                doZip
            fi
        else
            OSPL_BUILDER=`which tar`
            if [ "$?" != "0" ]
            then
                echo "Error - No packager found please set OSPL_BUILDER"
                return 1
            else
                doTar
            fi
        fi
    else
        # if tar or zip do with the commands/options we know
        if [ "${OSPL_BUILDER_APP}" = "tar" ]
        then
            doTar
        else
            if [ "${OSPL_BUILDER_APP}" = "zip" ]
            then
                doZip
            else
                # Last resort just try the command given
                echo ${OSPL_BUILDER} ${OUT} ${INSTTYPE}
                ${OSPL_BUILDER} ${OUT} ${INSTTYPE}
            fi
        fi
    fi
}

removeValgrindCmd ()
{
    if [ "$VALGRIND" != "yes" ]
    then
        VAR_LIST=`grep "^VG_" $OSPL_HOME/bin/valgrind_cmds | sed -e 's/ /@/g'`

        for i in $VAR_LIST
        do
            VAR=`echo $i | awk -F'=' '{ print $1 }'`
            #Do the ones that are before a command and have a space
            #then the ones with no space at the end
            sed -e "s/\$${VAR} //g;s/\$${VAR}//g" \
                $1 > $1.tmp
            mv $1.tmp $1
        done
    fi
}

buildTarGZ ()
{
   tar -cf $1.tar $2
   gzip $1.tar
}

buildTarZ ()
{
   tar -cf - $2 | compress > $1.tar.Z
}

buildZip ()
{
   zip -r $1.zip $2
}

make_hde_mirror_and_builder ()
{
    INSTTYPE="HDE"
    FULLINSTTYPE="Host_Development_Environment"
    make_mirror_and_builder "hde"
}

make_rts_mirror_and_builder ()
{
    INSTTYPE="RTS"
    FULLINSTTYPE="Runtime_System"
    make_mirror_and_builder "rts"
}

make_mirror_and_builder ()
{
    TYPE=$1
    echo Making mirror for "${FULLINSTTYPE}", platform "${SOURCE_TARGET}, environment ${ENV}"

    sh ./make_${TYPE}_mirror "${SOURCE_TARGET}" "${SOURCE_HOST}" "${PACKAGE_VERSION}" "${PACKAGE_DATE}" \
        "${ENV}" "${TXTFILE_CONVERTER}" "${SOURCE_HOST_SHORT}" "${SOURCE_TARGET_SHORT}"
    if [ "$INSTALLER" = "true" ]
    then
        echo Making "${BUILDER_TARGET}" builder for "${FULLINSTTYPE}", platform "${SOURCE_TARGET}, environment ${ENV}"
        sh ./make_builder "${INSTTYPE}" "${FULLINSTTYPE}" "${SOURCE_TARGET}" \
            "${BUILDER_TARGET}" "${SCRIPT_NAME}" "${ENV}" "${GETLIC_INFO_NAME}" "true"
        if [ "$SOURCE" = "false" -a "$TYPE" = "hde" ]
        then
            set_hde_envs "${SOURCE_TARGET}" "${SOURCE_HOST}" "${PACKAGE_VERSION}" "${PACKAGE_DATE}" \
                "${ENV}" "${TXTFILE_CONVERTER}" "${SOURCE_HOST_SHORT}" "${SOURCE_TARGET_SHORT}"
            if [ -d "$HDE_dir/src" ]
            then
                #Move the source and do another distro as the tests check the HDE directory
                echo Making "${BUILDER_TARGET}" builder for "${FULLINSTTYPE}", platform \
                    "${SOURCE_TARGET}, environment ${ENV} With NO SOURCE"
                sleep 600 &
                TMP_PID=$!
                mkdir /tmp/$TMP_PID
                mv $HDE_dir/src /tmp/$TMP_PID/.
                sh ./make_builder "${INSTTYPE}" "${FULLINSTTYPE}" "${SOURCE_TARGET}" \
                    "${BUILDER_TARGET}" "${SCRIPT_NAME}" "${ENV}" "${GETLIC_INFO_NAME}" "false"
                mv /tmp/$TMP_PID/src $HDE_dir/.
                rm -rf /tmp/$TMP_PID
            else
                echo "## There was no $HDE_dir/src to delete"
            fi
        fi
    fi
}

installer_setup ()
{
    # $1 = release type   : HDE or RTS
    # $2 = full release name : Host Development Environment of Runtime System
    # $3 = source target  : x86.linux-2.6 or sparc.solaris8
    # $4 = builder target : linux or solaris-sparc
    # $5 = name of script to setup environment
    # $6 = environment : for example '-release' or '-dev'
    # $7 = name of script to obtain license information

    INSTTYPE="$1"
    INSTTYPE_FULL="$2"
    SOURCE_TARGET="$3"
    BUILDER_TARGET="$4"
    SCRIPT_NAME="$5"
    SOURCE_ENV="$6"
    GETLIC_INFO_NAME="$7"
    SOURCE="$8"

    # set SOURCE_TARGET_SHORT to be used in bitrock
    SOURCE_TARGET_SHORT=`expr "${SOURCE_TARGET}" : '[a-zA-Z0-9_]*\.\([a-zA-Z]*\)'`

    if [ "$SOURCE" = "false" -a "$INSTTYPE" = "HDE" ]
    then
        EXTRA=-nosrc
    fi

    if [ "${SOURCE_ENV}" = "-release" ]
    then
        TARGET_ENV="";
    else
        TARGET_ENV=${SOURCE_ENV}
    fi

    #determine if licensing is enabled
    if [ -z "${FLEX_HOME}" ]
    then
        WITHLICENSE=false;
    else
        WITHLICENSE=true;
    fi

    echo "Making builder for ${INSTTYPE_FULL} (${INSTTYPE}, ${SOURCE_TARGET}${TARGET_ENV}, ${BUILDER_TARGET})"

    echo Release is ${PACKAGE_VERSION}
    echo Date is ${PACKAGE_DATE}

    #set output directory, currently no parameter
    OUTPUTDIR="$OSPL_HOME/install/VC"
    mkdir -p $OUTPUTDIR
}

printUsage ()
{
   echo "Usage: make_all"
   echo "   -noinstaller             Do not create distribution, just creates the local HDE and RTS"
   echo "   -nosrc                   Do not include the ospli src that made the build"
   echo "   -help                    Print help"
}

# TRUE Defaults
SOURCE=true
INSTALLER=true

set_envs ()
{
    while [ $# -gt 0 ]
    do
        case $1 in
            -noinstaller)
                INSTALLER=false
                shift 1
                ;;
            -nosrc)
                SOURCE=false
                shift 1
                ;;
            -help)
	            printUsage;
                exit 0
                ;;
            *)
                echo "Bad argument: $1"
	            printUsage
                exit 1
                ;;
        esac
    done

    ENV=`expr "${SPLICE_TARGET}" : '[^-]*\(.*\)'`

    SOURCE_HOST=`expr "${SPLICE_HOST}" : '\([^-]*\)'`
    SOURCE_HOST_SHORT=`expr "${SPLICE_HOST}" : '[a-zA-Z0-9_]*\.\([a-zA-Z]*\)'`
    SOURCE_TARGET=`expr "${SPLICE_TARGET}" : '\([^-]*\)'`
    SOURCE_TARGET_SHORT=`expr "${SPLICE_TARGET}" : '[a-zA-Z0-9_]*\.\([a-zA-Z]*\)'`

    BUILDER_TARGET=""
    SCRIPT_NAME=""
    TXTFILE_CONVERTER=""
    GETLIC_INFO_NAME=""

    if [ "${SOURCE_HOST_SHORT}" = "linux" ]
    then
        BUILDER_TARGET="linux"
        SCRIPT_NAME="release.com"
        GETLIC_INFO_NAME="getlic_info"
    fi

    if [ "${SOURCE_HOST_SHORT}" = "win" ]
    then
        BUILDER_TARGET="windows"
        SCRIPT_NAME="release.bat"
        TXTFILE_CONVERTER="unix2dos"
        GETLIC_INFO_NAME="getlic_info.bat"
    fi

    if [ "${SOURCE_HOST_SHORT}" = "solaris" ]
    then
        BUILDER_TARGET="solaris-sparc"
        SCRIPT_NAME="release.com"
        GETLIC_INFO_NAME="getlic_info"
    fi
}

set_init_envs ()
{
    target=$1
    suffix_exe=""
    target_suffix_exe=""
    suffix_script=""

    host=$2
    target_version=$3
    target_date=$4

    if [ "${host}" = "x86.win32" ]
    then
        suffix_exe=".exe"
        suffix_script=".bat"
    fi

    case ${target} in
        x86.win32)
            target_suffix_exe=".exe"
            ;;
        *.vxworks6*)
            target_suffix_exe=".vxe"
            ;;
    esac

    if [ "x_$5" = "x_" ]; then
        source_env="-release"
    else
        source_env=$5
    fi

    if [ "x_$5" = "x_-release" ]; then
        target_env="";
    else
        target_env=$5;
    fi

    TXTFILE_CONVERTER="$6"
    SOURCE_HOST_SHORT="$7"
    SOURCE_TARGET_SHORT="$8"
}

set_rts_envs ()
{
    set_init_envs "$@"
    RTS_base=${OSPL_HOME}/install/RTS
    if [ "${target}" = "x86.win32" ]
    then
        RTS_subdir=x86.win32${target_env}
    else
        RTS_subdir=${target}${target_env}
    fi
    RTS_dir=${RTS_base}/${RTS_subdir}

}

set_hde_envs ()
{
    set_init_envs "$@"
    HDE_base=${OSPL_HOME}/install/HDE
    if [ "${target}" = "x86.win32" ]
    then
        HDE_subdir=x86.win32${target_env}
    else
        HDE_subdir=$1${target_env}
    fi
    HDE_dir=${HDE_base}/${HDE_subdir}

    ORB_TMPLS="\
                DDS_ACE_TAO_1_4_1
                DDS_Eorb_3_0
                DDS_Mico_2_3_11
                DDS_OpenFusion_1_4_1
                DDS_OpenFusion_1_5_1
                DDS_OpenFusion_1_6_1"

    PLATFORM_EXT=unix
    case ${target} in
        x86_64.linux2.6*)
            PLATFORM_EXT=unix64
            ;;
        x86.elinos*)
            PLATFORM_EXT=elinos
            ;;
        PPC5plus.AIX5.3*)
            PLATFORM_EXT=xlc
            ;;
        sparc.solaris10_studio12*)
            PLATFORM_EXT=suncc
            ;;
    esac
}

remove_hde_mirror ()
{
    #
    # Remove old HDE first
    #
    if [ -d ${HDE_dir} ]
    then
        printf "*   Remove old directory ${HDE_dir}... "
        chmod -R 777 ${HDE_dir} 2> /dev/null
        rm -rf ${HDE_dir};
        echo "Ready"
    fi
}

create_hde_mirror ()
{
    #
    # Prepare HDE master directory
    #
    printf "*   Prepare HDE master directory ... "
    mkdir -p ${HDE_dir}; echo "Ready"
}

remove_rts_mirror ()
{
    #
    # Remove old RTS first
    #
    if [ -d ${RTS_dir} ]
    then
        printf "*   Remove old RTS/$target directory ... "
        chmod -R 777 ${RTS_dir} 2> /dev/null
        rm -rf ${RTS_dir};
        echo "Ready"
    fi
}

create_rts_mirror ()
{
   #
   # Prepare RTS master directory
   #
    printf "*   Prepare RTS master directory ... "
    mkdir -p ${RTS_dir}; echo "Ready"
}

install_hde_target ()
{
    target_os=`expr "$target" : '[a-zA-Z0-9_]*\.\([a-zA-Z]*\)'`
    host_os=`expr "$host" : '[a-zA-Z0-9_]*\.\([a-zA-Z]*\)'`

    #
    # Copy general license file
    #
    printf "*     Copy General LICENSE file in place "
    cp ${OSPL_HOME}/LICENSE ${HDE_dir}/.
    echo "Ready"

    #
    # Copy interface file for OpenSplice
    #
    printf "*     Copy OpenSplice IDL interface files "
    mkdir ${HDE_dir}/etc
    mkdir ${HDE_dir}/etc/idl
    cp ${OSPL_HOME}/etc/idl/*.idl ${HDE_dir}/etc/idl/

    #
    # Copy in the buildinfo if produced from the scoreboard
    #
    if [ -f "${OSPL_HOME}/etc/BUILDINFO" ]
    then
        cp ${OSPL_HOME}/etc/BUILDINFO ${HDE_dir}/etc/.
    fi
    echo "Ready"

    #
    # Copy in the releaseinfo file
    #
    if [ -f "${OSPL_HOME}/release_info/RELEASE" ]
    then
        cp ${OSPL_HOME}/release_info/RELEASE ${HDE_dir}/etc/RELEASEINFO
    fi
    echo "Ready"

    # java definitions

    mkdir -p ${HDE_dir}/etc/java
    cp ${OSPL_HOME}/etc/java/defs.jdk ${HDE_dir}/etc/java

    #
    # Copy Valgrind suppression file
    #
    if [ "$VALGRIND" = "yes" ]
    then
	echo "*     Copy Valgrind suppression file"
	cp ${OSPL_HOME}/etc/valgrind-suppressions.txt ${HDE_dir}/etc/
    fi

    #
    # Copy IDL preprocessor configuration files
    #
    echo "*     Copy IDL preprocessor configuration files"
    mkdir ${HDE_dir}/etc/idlpp
    cp ${OSPL_HOME}/etc/idl/*.idl ${HDE_dir}/etc/idlpp/

    #
    # Copy IDL preprocessor configuration file for CCPP
    #
    if [ "${INCLUDE_API_DCPS_CCPP}" = "yes" ]
    then
        printf "*       For CCPP ... "
        mkdir ${HDE_dir}/etc/idlpp/CCPP

        for ORB_TMPL in ${ORB_TMPLS}
        do
            mkdir ${HDE_dir}/etc/idlpp/CCPP/${ORB_TMPL}
            cp ${OSPL_HOME}/etc/idlpp/CCPP/orb_independent/corba* ${HDE_dir}/etc/idlpp/CCPP/${ORB_TMPL}
            cp ${OSPL_HOME}/etc/idlpp/CCPP/${ORB_TMPL}/corbaCxxMainInclude ${HDE_dir}/etc/idlpp/CCPP/${ORB_TMPL}
        done

        # cp ${OSPL_HOME}/etc/idlpp/CCPP/corba* ${HDE_dir}/etc/idlpp/CCPP/
        echo "Ready"
    fi

    #
    # Copy IDL preprocessor configuration file for SACPP
    #
    if [ "${INCLUDE_API_DCPS_SACPP}" = "yes" ]
    then
        printf "*       For SACPP ... "
        mkdir ${HDE_dir}/etc/idlpp/SACPP
        cp ${OSPL_HOME}/etc/idlpp/SACPP/* ${HDE_dir}/etc/idlpp/SACPP/
        echo "Ready"
    fi

    #
    # Copy IDL preprocessor configuration file for SAJ/CJ
    #
    if  [ "${INCLUDE_API_DCPS_SAJ}" = "yes" ] || [ "${INCLUDE_API_DCPS_CJ}" = "yes" ]
    then
        printf "*       For SAJ/CJ ... "
        mkdir ${HDE_dir}/etc/idlpp/SAJ
        cp ${OSPL_HOME}/etc/idlpp/SAJ/tmpl* ${HDE_dir}/etc/idlpp/SAJ/
        echo "Ready"
    fi

    #
    # Copy IDL preprocessor configuration file for SAC
    #
    if [ "${INCLUDE_API_DCPS_SAC}" = "yes" ]
    then
        printf "*       For SAC ... "
        mkdir ${HDE_dir}/etc/idlpp/SAC
        cp ${OSPL_HOME}/etc/idlpp/SAC/sac* ${HDE_dir}/etc/idlpp/SAC/
        echo "Ready"
    fi

    #
    # Copy IDL preprocessor configuration file for SACS
    #
    if [ "${INCLUDE_API_DCPS_SACS}" = "yes" ]
    then
        printf "*       For SACS ... "
        mkdir ${HDE_dir}/etc/idlpp/SACS
        cp ${OSPL_HOME}/etc/idlpp/SACS/* ${HDE_dir}/etc/idlpp/SACS/
        echo "Ready"
    fi

    echo "*     IDL preprocessor configuration files Ready"

    #
    # Copy default configuration file for OpenSplice
    #

    printf "*     Copy OpenSplice default configuration file "

    mkdir ${HDE_dir}/etc/config
    sed -e "s/__RELEASE__/${target_version}/g" \
        -e "s/__EXE__/${target_suffix_exe}/g" \
        ${OSPL_HOME}/etc/ospl.xml > ${HDE_dir}/etc/config/ospl.xml
    sed -e "s/__RELEASE__/${target_version}/g" \
        -e "s/__EXE__/${target_suffix_exe}/g" \
        ${OSPL_HOME}/etc/ospl_no_network.xml > ${HDE_dir}/etc/config/ospl_no_network.xml

    if [ "${INCLUDE_SERVICES_DDSI}" = "yes" ]
    then
        sed -e "s/__RELEASE__/${target_version}/g" \
            -e "s/__EXE__/${target_suffix_exe}/g" \
            ${OSPL_HOME}/etc/ospl_ddsi2.xml > ${HDE_dir}/etc/config/ospl_ddsi2.xml

        sed -e "s/__RELEASE__/${target_version}/g" \
            -e "s/__EXE__/${target_suffix_exe}/g" \
            ${OSPL_HOME}/etc/ospl_ddsi2_with_native.xml > ${HDE_dir}/etc/config/ospl_ddsi2_with_native.xml
    fi

    echo "Ready"

    #
    # Copy library files
    #
    echo "*     Copy library files"
    printf "*         For target ... "
    release=${OSPL_HOME}/lib/${target}${source_env}
    if [ -d "${release}" ]
    then
        mkdir ${HDE_dir}/lib
        install_dir $release ${HDE_dir} lib

        # remove cpp library
        rm -f ${HDE_dir}/lib/*ddscpp*
        rm -f ${HDE_dir}/lib/*ddslic*
    else
        echo "* ##    No target library files detected"
    fi
    echo "Ready"

    if [ "${target_os}" != "${host_os}" -o "$target" != "$host" ]
    then
        printf "*         For host ... "
        release=${OSPL_HOME}/lib/${host}${source_env}
        if [ -d "${release}" ]
        then
            mkdir ${HDE_dir}/host
            mkdir ${HDE_dir}/host/lib
            install_dir ${release} ${HDE_dir} /host/lib
            rm -f ${HDE_dir}/host/lib/*ddscpp*
            rm -f ${HDE_dir}/host/lib/*ddslic*
        else
            echo "* ##    No host library files detected"
        fi
        echo "Ready"
    fi

    #
    # Copy java archive files
    #
    if [ "${INCLUDE_JAVA}" = "yes" ]
    then
        printf "*     Copy JAVA target archive files... "
        release=${OSPL_HOME}/jar/${target}${source_env}
        if [ -d "${release}" ]
        then
            mkdir -p ${HDE_dir}/jar
            install_dir ${release} ${HDE_dir} jar
        else
            echo "* ##    No JAVA archive files detected"
        fi
        echo "Ready"
    fi

    #
    # Copy script files
    #
    echo "*     Copy script files"
    release=${OSPL_HOME}/install/bin
    if [ -d "${release}" ]
    then
        mkdir -p ${HDE_dir}/bin
        install_ascii_file "${release}/osplconf${suffix_script}" "${HDE_dir}/bin"
        if [ "${host}" = "x86.win32" ]
        then
            install_ascii_file "${release}/run.vbs" "${HDE_dir}/bin"

            if [ "${target}" = "x86.win32" ]
            then
                install_ascii_file "${release}/examples${suffix_script}" "${HDE_dir}/bin"
                install_ascii_file "${release}/apiexamples${suffix_script}" "${HDE_dir}/bin"
                install_ascii_file "${release}/c#-pingpong-example${suffix_script}" "${HDE_dir}/bin"
                install_ascii_file "${release}/c#-chat-tutorial${suffix_script}" "${HDE_dir}/bin"
                install_ascii_file "${release}/osplctrl${suffix_script}" "${HDE_dir}/bin"
                if [ "${INCLUDE_TOOLS_MMSTAT}" = "yes" ]
                then
                    install_ascii_file "${release}/osplmmstat${suffix_script}" "${HDE_dir}/bin"
                fi
            fi
        fi
    else
        echo "* ##    No script files detected"
    fi
    echo "*     Script files Ready"

    #
    # Copy executable files
    #
    echo "*     Copy OpenSplice executables"
    target_release=${OSPL_HOME}/exec/${target}${source_env}
    host_release=${OSPL_HOME}/exec/${host}${source_env}

    if [ -d "${target_release}" -a -d "${host_release}" ]
    then
        mkdir -p ${HDE_dir}/bin
        install_bin_file ${host_release} ${HDE_dir} bin idlpp${suffix_exe}
        install_bin_file ${host_release} ${HDE_dir} bin cppgen${suffix_exe}
        # Copy the executables for the target
        if [ "${SOURCE_TARGET_SHORT}" != "int" ]
        then
            install_bin_file ${target_release} ${HDE_dir} bin spliced${target_suffix_exe}

            # See DDS1787
            if [ "$SPLICE_TARGET" != "x86.linux2.6-shmt_dev" ]
            then
                install_bin_file ${target_release} ${HDE_dir} bin networking${target_suffix_exe}
                install_bin_file ${target_release} ${HDE_dir} bin durability${target_suffix_exe}

                if [ "${INCLUDE_SERVICES_DDSI}" = "yes" ]
                then
                    install_bin_file ${target_release} ${HDE_dir} bin ddsi2${target_suffix_exe}
                fi
            fi

            if [ "${INCLUDE_TOOLS_OSPL}" = "yes" ]
            then
                install_bin_file ${target_release} ${HDE_dir} bin ospl${target_suffix_exe}
            fi
            if [ "${INCLUDE_TOOLS_MMSTAT}" = "yes" ]
            then
                install_bin_file ${target_release} ${HDE_dir} bin mmstat${target_suffix_exe}
            fi
            if [ "${INCLUDE_TOOLS_SHMDUMP}" = "yes" ]
            then
                install_bin_file ${target_release} ${HDE_dir} bin shmdump${target_suffix_exe}
            fi
        fi

        pdbfiles=`ls ${OSPL_HOME}/exec/${target}${source_env}/*.pdb 2>/dev/null`
        if [ "${target}" = "x86.win32" ] && [ -n "${pdbfiles}" ]
        then
            cp ${pdbfiles} ${HDE_dir}/bin
        fi
    else
        echo "* ##    No executables detected"
    fi

    # Windows service installer copy
    if [ "${target}" = "x86.win32" ]
    then
        # Put all the *.pdb's into the bin directory iff this is win32.
        mv ${HDE_dir}/lib/*.dll ${HDE_dir}/bin/.  >& /dev/null
        mv ${HDE_dir}/lib/*.netmodule ${HDE_dir}/bin/.  >& /dev/null
        mv ${HDE_dir}/lib/*.pdb ${HDE_dir}/bin/.  >& /dev/null
    fi

    #
    # Copy include files
    #
    echo "*     Copy language specific interface files"
    mkdir ${HDE_dir}/include
    mkdir ${HDE_dir}/include/sys
    mkdir ${HDE_dir}/include/include

    os=`expr "${target}" : '[A-Za-z0-9_-]*\.\([^_]*\)'`
    mkdir ${HDE_dir}/include/posix
    mkdir ${HDE_dir}/include/posix/include
    mkdir ${HDE_dir}/include/common
    mkdir ${HDE_dir}/include/common/include

    install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/posix/include/os_*.h" "${HDE_dir}/include/posix/include/"
    install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/common/include/os_*.h" "${HDE_dir}/include/common/include/"

    mkdir ${HDE_dir}/include/svr4
    mkdir ${HDE_dir}/include/svr4/include

    if [ -d "${OSPL_HOME}/src/abstraction/os/${os}/include/" ]
    then
        install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/${os}/include/os_*.h" "${HDE_dir}/include/include"
    fi

    install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/include/os_*.h" "${HDE_dir}/include/sys"
    install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/include/os.h" "${HDE_dir}/include/sys"
    install_ascii_fileset "${OSPL_HOME}/src/database/database/include/[cq]_*.h" "${HDE_dir}/include/sys"
    install_ascii_fileset "${OSPL_HOME}/src/kernel/include/v_*.h" "${HDE_dir}/include/sys"
    install_ascii_fileset "${OSPL_HOME}/src/user/include/u_*.h" "${HDE_dir}/include/sys"
    install_ascii_file "${OSPL_HOME}/src/include/kernelModule.h" "${HDE_dir}/include/sys"

    if [ "${target_os}" = "vxworks" ]
    then
            case ${os} in
                vxworks6*)
                    if [ -d "${OSPL_HOME}/src/abstraction/os/$os/include/" ]
                    then
                        install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/$os/include/*.h" "${HDE_dir}/include"
                    fi
                    ;;
                *)
                    if [ -d "${OSPL_HOME}/src/abstraction/os/$os/include/vxworks/" ]
                    then
                        install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/$os/include/vxworks/*.h" "${HDE_dir}/include"
                        install_ascii_fileset "${OSPL_HOME}/src/abstraction/os/$os/include/vxworks/sys/*.h" "${HDE_dir}/include/sys"
                    fi
                    ;;
            esac
    fi

    #
    # Copy C&M related include files
    #

    if [ "${INCLUDE_API_CM}" = "yes" ]
    then
        echo "*     Copy include files for C&M"
        mkdir ${HDE_dir}/include/cm
        install_ascii_fileset "${OSPL_HOME}/src/api/cm/common/include/*.h" \
            "${HDE_dir}/include/cm"
        install_ascii_fileset "${OSPL_HOME}/src/api/cm/c/include/*.h" \
            "${HDE_dir}/include/cm"
        install_ascii_fileset "${OSPL_HOME}/src/api/cm/xml/include/*.h" \
            "${HDE_dir}/include/cm"
        echo "*     C&M Ready"
    fi

    #
    # Create and sign a Global Assembly for the SACS Dll
    #
    if [ "${INCLUDE_API_DCPS_SACS}" = "yes" ]
    then
        if [ "${target}" = "x86.win32" ]
        then
            echo "*     Create and sign a Global Assembly for the SACS DLL"
            cskeyfile=`cygpath -d "${OSPL_HOME}/src/api/dcps/sacs/dcpssacs.snk"`
            csoutdir=`cygpath -d "${HDE_dir}/bin/"`
            csmodfile=`cygpath -d "${OSPL_HOME}/lib/${target}${source_env}/dcpssacs.netmodule"`
            csoutfile="${csoutdir}${CS_ASSEMBLY_NAME}.dll"

            al /t:library /keyfile:"${cskeyfile}" /v:${CS_DLL_VERSION} /out:"${csoutfile}" "${csmodfile}"
        fi
        # This needs to be changed when we support C# for linux and add an else part
        # that will set all these variables correctly and call the appropriate mono
        # executable for the assembly linker.
        echo "*     Ready"
    fi

    #
    # Copy documentation
    #
    printf "*     Copy documentation... "

    if [ "${INCLUDE_API_DCPS_SACS}" = "yes" ]
    then
        mkdir -p ${OSPL_HOME}/docs/html/cs_api
        doxygen ${OSPL_HOME}/etc/doxygen_cs_api.cfg
    fi

    cp -r ${OSPL_HOME}/docs ${HDE_dir}
    install_ascii_file "${OSPL_HOME}/index.html" "${HDE_dir}"
    # remove documentation for components that are not installed
    if [ "${INCLUDE_API_DCPS_SAJ}" != "yes" -a "${INCLUDE_API_DCPS_CJ}" != "yes" ]
    then
        rm -f ${HDE_dir}/docs/pdf/OpenSplice_refman_Java.pdf
    fi
    if [ "${INCLUDE_API_DCPS_SAC}" != "yes" ]
    then
        rm -f ${HDE_dir}/docs/pdf/OpenSplice_refman_C.pdf
    fi
    if [ "${INCLUDE_API_DCPS_SACPP}" != "yes" -a "${INCLUDE_API_DCPS_CCPP}" != "yes" ]
    then
        rm -f ${HDE_dir}/docs/pdf/OpenSplice_refman_CPP.pdf
    fi
    echo "Ready"

    #
    # Copy DCPS related include files
    #
    echo "*     Copy include files"
    echo "*       For DCPS"

    mkdir -p ${HDE_dir}/include/dcps
    #
    # DCPS C++ CCPP
    #
    if [ "${INCLUDE_API_DCPS_CCPP}" = "yes" ]
    then
        release=`ls -d ${OSPL_HOME}/src/api/dcps/ccpp/bld/${target}${source_env} 2>/dev/null`
        echo "*         For C++"
        echo "*           For CCPP ... "
        mkdir ${HDE_dir}/include/dcps/C++
        mkdir ${HDE_dir}/include/dcps/C++/CCPP

        for ORB_TMPL in ${ORB_TMPLS}
        do
            mkdir ${HDE_dir}/include/dcps/C++/CCPP/${ORB_TMPL}
            install_ascii_fileset "${OSPL_HOME}/src/api/dcps/ccpp/orb/${ORB_TMPL}/*.[ih]" \
              "${HDE_dir}/include/dcps/C++/CCPP/${ORB_TMPL}"
        done

        install_ascii_fileset "${release}/*.[ih]" "${HDE_dir}/include/dcps/C++/CCPP/${SPLICE_ORB}"

        install_ascii_fileset "${OSPL_HOME}/src/api/dcps/ccpp/include/*.[ih]"  \
            "${HDE_dir}/include/dcps/C++/CCPP"
        install_ascii_fileset "${OSPL_HOME}/etc/idl/*opics.idl"  \
            "${HDE_dir}/include/dcps/C++/CCPP"
        install_ascii_file "${OSPL_HOME}/src/api/dcps/gapi/include/gapi.h"  \
            "${HDE_dir}/include/dcps/C++/CCPP"
        install_ascii_file "${OSPL_HOME}/src/api/dcps/gapi/include/gapi_loanRegistry.h"  \
            "${HDE_dir}/include/dcps/C++/CCPP"
        echo "*           CCPP Ready"
    fi

    #
    # DCPS C++ SACPP
    #
    if [ "${INCLUDE_API_DCPS_SACPP}" = "yes" ]
    then
        release=`ls -d ${OSPL_HOME}/src/api/dcps/sacpp/bld/${target}${source_env} 2>/dev/null`
        echo "*         For C++"
        echo "*           For SACPP ... "
        if [ ! -d ${HDE_dir}/include/dcps/C++ ]
        then
            mkdir ${HDE_dir}/include/dcps/C++
        fi
        mkdir ${HDE_dir}/include/dcps/C++/SACPP
        mkdir ${HDE_dir}/include/dcps/C++/SACPP/mapping

        install_ascii_fileset "${release}/*.[ih]" "${HDE_dir}/include/dcps/C++/SACPP"
        install_ascii_fileset "${OSPL_HOME}/src/api/dcps/sacpp/include/*.h" \
            "${HDE_dir}/include/dcps/C++/SACPP"
        install_ascii_fileset "${OSPL_HOME}/src/api/dcps/sacpp/include/mapping/*.h" \
            "${HDE_dir}/include/dcps/C++/SACPP/mapping"
        install_ascii_fileset "${OSPL_HOME}/src/api/dcps/ccpp/include/*.[ih]" \
            "${HDE_dir}/include/dcps/C++/SACPP"
        install_ascii_fileset "${OSPL_HOME}/etc/idl/*opics.idl" \
            "${HDE_dir}/include/dcps/C++/SACPP"
        install_ascii_file "${OSPL_HOME}/src/api/dcps/gapi/include/gapi.h" \
            "${HDE_dir}/include/dcps/C++/SACPP"
        install_ascii_file "${OSPL_HOME}/src/api/dcps/gapi/include/gapi_loanRegistry.h" \
            "${HDE_dir}/include/dcps/C++/SACPP"
        echo "*           SACPP  Ready"
        echo "*         C++ Ready"
    fi

    #
    # DCPS C SAC
    #
    if [ "${INCLUDE_API_DCPS_SAC}" = "yes" ]
    then
        echo "*         For C"
        echo "*           For SAC ... "
        mkdir ${HDE_dir}/include/dcps/C
        mkdir ${HDE_dir}/include/dcps/C/SAC
        install_ascii_fileset "${OSPL_HOME}/src/api/dcps/sac/include/*.h" \
            "${HDE_dir}/include/dcps/C/SAC"
        echo "*           SAC Ready"
        echo "*         C Ready"
    fi
    echo "*       DCPS Ready"
    echo "*     Language specific interface files Ready"


    #
    # Copy custom CJ
    #
    if [ "${INCLUDE_API_DCPS_CJ}" = "yes" ]
    then
        if [ "${target}" != "x86.win32" ]
        then
            echo "*     Copy custom CJ support ..."

            mkdir -p ${HDE_dir}/custom_lib/cj/java
            release=`ls -d ${OSPL_HOME}/src/api/dcps/saj 2>/dev/null`
            cp -r ${release}/java/code ${HDE_dir}/custom_lib/cj/java

            release=`ls -d ${OSPL_HOME}/src/api/dcps/cj 2>/dev/null`
            echo "*       Copying script files for custom library generation ..."
            install_ascii_file "${release}/custom/README"   "${HDE_dir}/custom_lib/cj"
            install_ascii_file "${release}/custom/BUILD"    "${HDE_dir}/custom_lib/cj/java"
            install_ascii_file "${release}/custom/orbdeps"  "${HDE_dir}/custom_lib/cj/java"
        fi
        echo "*     custom CJ support Ready"
    fi

    #
    # Copy custom CCPP
    #
    if [ "${INCLUDE_API_DCPS_CCPP}" = "yes" ]
    then
        echo "*     Copy custom CCPP support ... "
        release=`ls -d ${OSPL_HOME}/src/api/dcps/ccpp 2>/dev/null`
        mkdir -p ${HDE_dir}/custom_lib
        mkdir -p ${HDE_dir}/custom_lib/ccpp

        install_ascii_fileset "${release}/code/*.cpp" "${HDE_dir}/custom_lib/ccpp"
        install_ascii_fileset "${OSPL_HOME}/etc/idl/*opics.idl" "${HDE_dir}/custom_lib/ccpp"

        if [ -f ${release}/custom/makefile_$PLATFORM_EXT ]
        then
            install_ascii_file "${release}/custom/makefile_$PLATFORM_EXT" \
                "${HDE_dir}/custom_lib/ccpp" "makefile"
        fi

        install_ascii_file "${release}/custom/README" "${HDE_dir}/custom_lib/ccpp"
        install_ascii_file "${release}/custom/setup" "${HDE_dir}/custom_lib/ccpp"
        install_ascii_file "${OSPL_HOME}/setup/makefiles/orbdeps.mak" "${HDE_dir}/custom_lib/ccpp"

        echo "*     custom CCPP support Ready"
    fi

    #
    # Copy custom SACPP
    #
    if [ "${INCLUDE_API_DCPS_SACPP}" = "yes" ]
    then
        echo "*     Copy custom SACPP support ... "
        mkdir -p ${HDE_dir}/custom_lib/sacpp

        # Code that can be re-used from CCPP.
        release=${OSPL_HOME}/src/api/dcps/ccpp
        install_ascii_fileset "${release}/code/*.cpp" "${HDE_dir}/custom_lib/sacpp"
        install_ascii_fileset "${OSPL_HOME}/etc/idl/*opics.idl" "${HDE_dir}/custom_lib/sacpp"

        # SACPP specific makefile stuff.
        release=${OSPL_HOME}/src/api/dcps/sacpp
        install_ascii_fileset "${release}/code/*.cpp" "${HDE_dir}/custom_lib/sacpp"

        if [ -f ${release}/custom/makefile_$PLATFORM_EXT ]
        then
             install_ascii_file "${release}/custom/makefile_${PLATFORM_EXT}" \
                "${HDE_dir}/custom_lib/sacpp" "makefile"
        fi
        install_ascii_file "${release}/custom/README" "${HDE_dir}/custom_lib/sacpp"

        echo "*     custom SACPP support Ready"
    fi

    #
    # Examples
    #
    echo "*     Copy examples"
    mkdir ${HDE_dir}/examples

    if [ "${target}" = "x86.win32" ]
    then
        echo "*       Create lib directory for Windows examples"
        mkdir ${HDE_dir}/examples/lib
        echo "*       Copy Visual Studio Solutions file"
        install_ascii_file "${OSPL_HOME}/examples/examples.sln" ${HDE_dir}/examples
        install_ascii_file "${OSPL_HOME}/examples/NewExamples.sln" ${HDE_dir}/examples
        echo "*       Copying new API examples"
        install_example "DDSAPIHelper"
    fi

    echo "*       For DCPS"
    mkdir -p ${HDE_dir}/examples/dcps
    mkdir ${HDE_dir}/examples/dcps/standalone

    # New examples not supported on wince, vxworks or integrity yet so do not include
    if [ "${SOURCE_TARGET_SHORT}" != "wince" -a "${SOURCE_TARGET_SHORT}" != "vxworks" -a "${SOURCE_TARGET_SHORT}" != "int" -a "${SOURCE_TARGET_SHORT}" != "elinos" ]
    then
        # oall the new examples for all Languages (including Corba options);
        # each Language/Corba option is installed only if the target platform is compatible.

        install_example "ContentFilteredTopic"
        install_example "Durability"
        install_example "HelloWorld"
        install_example "Lifecycle"
        install_example "Listener"
        install_example "Ownership"
        install_example "QueryCondition"
        install_example "WaitSet"
        install_example "BuiltInTopics"
        # oall end new examples


        # Copy the common include files directory;
        # it contain the platform specific implementations for features like sleep, threads, etc.
        # Meant to be included by all the examples.
        install_dir ${OSPL_HOME}/examples/common \
            ${HDE_dir}/examples/common

        install_ascii_file "${OSPL_HOME}/examples/dcps/README.html" \
                   ${HDE_dir}/examples/dcps
    fi

    if [ "${INCLUDE_CXX}" = "yes" -a "${SOURCE_TARGET_SHORT}" != "wince" ]
    then
        if [ "${SOURCE_TARGET_SHORT}" != "int" -a "${SOURCE_TARGET_SHORT}" != "vxworks" ]
        then
            echo "*         For CORBA C++ OpenFusion... "
            mkdir ${HDE_dir}/examples/dcps/CORBA
            mkdir ${HDE_dir}/examples/dcps/CORBA/C++
            mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion
            echo "*           For PingPong... "
            mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
            if [ "${target}" != "x86.win32" ]
            then
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP/OpenFusion/*.idl" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP/OpenFusion/*.cpp" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
                if [ -f ${OSPL_HOME}/examples/dcps/C++/CCPP/OpenFusion/makefile_$PLATFORM_EXT ]
                then
                     install_ascii_file ${OSPL_HOME}/examples/dcps/C++/CCPP/OpenFusion/makefile_$PLATFORM_EXT \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong Makefile
                fi
                install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/CCPP/OpenFusion/RUN \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
                removeValgrindCmd ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/RUN
                install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/CCPP/OpenFusion/README.txt \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
            else
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/PingPong
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/Ping
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/Pong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/*.idl" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/*.cpp" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/*.bat" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/PingPong/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/Ping/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/Ping
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/Pong/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong/Pong
                install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/CCPP_x86.win32/OpenFusion/PingPong/README.txt \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/PingPong
            fi
            echo "*           Ready"

            echo "*           For Tutorial... "
            mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
            if [ "${target}" != "x86.win32" ]
            then
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP/OpenFusion/*.idl" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP/OpenFusion/*.cpp" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP/OpenFusion/*.h" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP/OpenFusion/*.txt" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial

                if [ -f ${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP/OpenFusion/makefile_$PLATFORM_EXT ]
                then
                     install_ascii_file ${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP/OpenFusion/makefile_$PLATFORM_EXT \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial Makefile
                fi
            else
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/ChatBoxUtil
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/Chatter
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/MessageBoard
                mkdir ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/UserLoad
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/*.idl" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/*.cpp" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/*.h" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/*.txt" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial
                install_ascii_fileset \
                    "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/ChatBoxUtil/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/ChatBoxUtil
                install_ascii_fileset \
                    "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/Chatter/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/Chatter
                install_ascii_fileset \
                    "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/MessageBoard/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/MessageBoard
                install_ascii_fileset \
                    "${OSPL_HOME}/examples/dcps/Tutorial/C++/CCPP_x86.win32/OpenFusion/UserLoad/*.vcproj" \
                    ${HDE_dir}/examples/dcps/CORBA/C++/OpenFusion/Tutorial/UserLoad
           fi
           echo "*           Ready"
        fi
        echo "*         For standalone C++... "
        mkdir ${HDE_dir}/examples/dcps/standalone/C++
        echo "*           For PingPong... "
        mkdir ${HDE_dir}/examples/dcps/standalone/C++/PingPong
        if [ "${target}" != "x86.win32" ]
        then
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP/*.cpp" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong

            if [ -f ${OSPL_HOME}/examples/dcps/C++/SACPP/makefile_$PLATFORM_EXT ]
            then
                install_ascii_file ${OSPL_HOME}/examples/dcps/C++/SACPP/makefile_$PLATFORM_EXT \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong Makefile
            fi

            install_ascii_file ${OSPL_HOME}/examples/dcps/C++/SACPP/RUN \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
            removeValgrindCmd ${HDE_dir}/examples/dcps/standalone/C++/PingPong/RUN
            install_ascii_file ${OSPL_HOME}/examples/dcps/C++/SACPP/README.txt \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
        else
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/PingPong/PingPong
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/PingPong/Ping
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/PingPong/Pong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/*.cpp" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/*.bat" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/PingPong/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/Ping/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong/Ping
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/Pong/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong/Pong
            install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/SACPP_x86.win32/PingPong/README.txt \
                ${HDE_dir}/examples/dcps/standalone/C++/PingPong
        fi
        echo "*           Ready"

        echo "*           For Tutorial... "
        mkdir ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
        if [ "${target}" != "x86.win32" ]
        then
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP/*.cpp" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP/*.h" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial

            if [ -f ${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP/makefile_$PLATFORM_EXT ]
            then
                 install_ascii_file ${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP/makefile_$PLATFORM_EXT \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial Makefile
            fi

            install_ascii_file ${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP/*.txt \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
        else
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/ChatBoxUtil
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/Chatter
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/MessageBoard
            mkdir ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/UserLoad
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/*.cpp" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/*.h" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/*.txt" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/ChatBoxUtil/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/ChatBoxUtil
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/Chatter/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/Chatter
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/MessageBoard/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/MessageBoard
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C++/SACPP_x86.win32/UserLoad/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C++/Tutorial/UserLoad
        fi

        echo "*           Ready"
    fi

    if [ "${INCLUDE_C}" = "yes" -a "${SOURCE_TARGET_SHORT}" != "wince" ]
    then
        if [ "${SOURCE_TARGET_SHORT}" != "vxworks" ]
        then
            echo "*         For C++ on C... "
            mkdir ${HDE_dir}/examples/dcps/standalone/C++OnC
            echo "*           For PingPong..."
            mkdir ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
            if [ "${target}" != "x86.win32" ]
            then
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC/*.idl" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC/*.cpp" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
                install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/SAC/RUN \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
                removeValgrindCmd ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/RUN
                install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/SAC/README.txt \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong

                if [ -f ${OSPL_HOME}/examples/dcps/C++/SAC/makefile_$PLATFORM_EXT ]
                then
                    install_ascii_file ${OSPL_HOME}/examples/dcps/C++/SAC/makefile_$PLATFORM_EXT \
                        ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong Makefile
                fi

            else
                mkdir ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/PingPong
                mkdir ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/Ping
                mkdir ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/Pong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/*.idl" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/*.cpp" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/*.bat" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/PingPong/*.vcproj" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/PingPong
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/Ping/*.vcproj" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/Ping
                install_ascii_fileset "${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/Pong/*.vcproj" \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong/Pong
                install_ascii_file    ${OSPL_HOME}/examples/dcps/C++/SAC_x86.win32/PingPong/README.txt \
                    ${HDE_dir}/examples/dcps/standalone/C++OnC/PingPong
            fi
            echo "*         C++ On C Ready"
        fi

        echo "*         For standalone C... "
        mkdir ${HDE_dir}/examples/dcps/standalone/C
        echo "*           For PingPong... "
        mkdir ${HDE_dir}/examples/dcps/standalone/C/PingPong
        if [ "${target}" != "x86.win32" ]
        then
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC/*.c" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
            install_ascii_file ${OSPL_HOME}/examples/dcps/C/SAC/README.txt \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong

            if [ -f ${OSPL_HOME}/examples/dcps/C/SAC/makefile_$PLATFORM_EXT ]
            then
                 install_ascii_file ${OSPL_HOME}/examples/dcps/C/SAC/makefile_$PLATFORM_EXT \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong Makefile
            fi
            install_ascii_file ${OSPL_HOME}/examples/dcps/C/SAC/RUN \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
            removeValgrindCmd ${HDE_dir}/examples/dcps/standalone/C/PingPong/RUN
        else
            mkdir ${HDE_dir}/examples/dcps/standalone/C/PingPong/PingPong
            mkdir ${HDE_dir}/examples/dcps/standalone/C/PingPong/Ping
            mkdir ${HDE_dir}/examples/dcps/standalone/C/PingPong/Pong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/*.c" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/*.bat" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/PingPong/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong/PingPong
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/Ping/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong/Ping
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/Pong/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong/Pong
            install_ascii_file ${OSPL_HOME}/examples/dcps/C/SAC_x86.win32/PingPong/README.txt \
                ${HDE_dir}/examples/dcps/standalone/C/PingPong
        fi
        echo "*           Ready"
        echo "*           For Tutorial... "
        mkdir ${HDE_dir}/examples/dcps/standalone/C/Tutorial
        if [ "${target}" != "x86.win32" ]
        then
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC/*.c" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC/*.h" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC/*.txt" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial

            if [ -f ${OSPL_HOME}/examples/dcps/Tutorial/C/SAC/makefile_$PLATFORM_EXT ]
            then
                 install_ascii_file ${OSPL_HOME}/examples/dcps/Tutorial/C/SAC/makefile_$PLATFORM_EXT \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial Makefile
            fi
        else
            mkdir ${HDE_dir}/examples/dcps/standalone/C/Tutorial/ChatBoxUtil
            mkdir ${HDE_dir}/examples/dcps/standalone/C/Tutorial/Chatter
            mkdir ${HDE_dir}/examples/dcps/standalone/C/Tutorial/MessageBoard
            mkdir ${HDE_dir}/examples/dcps/standalone/C/Tutorial/UserLoad
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/*.idl" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/*.c" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/*.h" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/*.txt" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/ChatBoxUtil/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial/ChatBoxUtil
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/Chatter/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial/Chatter
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/MessageBoard/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial/MessageBoard
            install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C/SAC_x86.win32/UserLoad/*.vcproj" \
                ${HDE_dir}/examples/dcps/standalone/C/Tutorial/UserLoad
        fi
        echo "*           Ready"

    echo "*         C Ready"
    fi

    if [ "${INCLUDE_CS}" = "yes" -a "${target}" = "x86.win32" ]
    then
        echo "*         For standalone C#"
        mkdir ${HDE_dir}/examples/dcps/standalone/CS
        echo "*           For PingPong... "
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/PingPong
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Ping
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Pong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/CS/SACS/*.sln" \
            ${HDE_dir}/examples/dcps/standalone/CS
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Ping
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Pong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/Ping/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Ping
        sed -e "s/__CS_ASSEMBLY_NAME__/${CS_ASSEMBLY_NAME}/g" \
            -e "s/__CS_DLL_VERSION__/${CS_DLL_VERSION}/g" \
            ${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/Ping/Ping.csproj > ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Ping/Ping.csproj
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/Pong/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Pong
        sed -e "s/__CS_ASSEMBLY_NAME__/${CS_ASSEMBLY_NAME}/g" \
            -e "s/__CS_DLL_VERSION__/${CS_DLL_VERSION}/g" \
            ${OSPL_HOME}/examples/dcps/CS/SACS/PingPong/Pong/Pong.csproj > ${HDE_dir}/examples/dcps/standalone/CS/PingPong/Pong/Pong.csproj
        install_ascii_file    "${OSPL_HOME}/examples/dcps/CS/SACS/README.txt" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong/
        install_ascii_file    "${OSPL_HOME}/examples/dcps/CS/SACS/RUN.bat" \
            ${HDE_dir}/examples/dcps/standalone/CS/PingPong/

        echo "*           Ready"
        echo "*           For Tutorial... "
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Chatroom
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Data
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Properties
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/Chatroom
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/Data
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/Properties
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/Chatroom
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/Data
        mkdir ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/Properties

        install_ascii_file    "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/README.txt" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial

        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/*.sln" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial

        sed -e "s/__CS_ASSEMBLY_NAME__/${CS_ASSEMBLY_NAME}/g" \
            -e "s/__CS_DLL_VERSION__/${CS_DLL_VERSION}/g" \
        ${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/Chatter/Chatter.csproj > ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Chatter.csproj
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/Chatter/Chatroom/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Chatroom
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/Chatter/Data/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Data
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/Chatter/Properties/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/Chatter/Properties

        sed -e "s/__CS_ASSEMBLY_NAME__/${CS_ASSEMBLY_NAME}/g" \
            -e "s/__CS_DLL_VERSION__/${CS_DLL_VERSION}/g" \
        ${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/MessageBoard/MessageBoard.csproj > ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/MessageBoard.csproj
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/MessageBoard/Chatroom/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/Chatroom
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/MessageBoard/Data/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/Data
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/MessageBoard/Properties/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/MessageBoard/Properties

        sed -e "s/__CS_ASSEMBLY_NAME__/${CS_ASSEMBLY_NAME}/g" \
            -e "s/__CS_DLL_VERSION__/${CS_DLL_VERSION}/g" \
        ${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/UserLoad/UserLoad.csproj > ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/UserLoad.csproj
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/UserLoad/Chatroom/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/Chatroom
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#//UserLoad/Data/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/Data
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/C#/SAC#/UserLoad/Properties/*.cs" \
            ${HDE_dir}/examples/dcps/standalone/CS/Tutorial/UserLoad/Properties
        echo "*           Ready"
        echo "*         C# Ready"
    fi


    if [ "${INCLUDE_JAVA}" = "yes" -a "${SOURCE_TARGET_SHORT}" != "int" -a "${SOURCE_TARGET_SHORT}" != "vxworks" -a "${SOURCE_TARGET_SHORT}" != "wince" ]
    then
        echo "*         For standalone Java"
        mkdir ${HDE_dir}/examples/dcps/standalone/Java
        echo "*           For PingPong... "
        mkdir ${HDE_dir}/examples/dcps/standalone/Java/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/SAJ/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/Java/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/SAJ/*.java" \
            ${HDE_dir}/examples/dcps/standalone/Java/PingPong
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Java/SAJ/BUILD${suffix_script} \
            ${HDE_dir}/examples/dcps/standalone/Java/PingPong
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Java/SAJ/RUN${suffix_script} \
            ${HDE_dir}/examples/dcps/standalone/Java/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/SAJ/*.txt" \
            ${HDE_dir}/examples/dcps/standalone/Java/PingPong
        echo "*           Ready"
        echo "*           For Tutorial... "
        mkdir ${HDE_dir}/examples/dcps/standalone/Java/Tutorial
        mkdir ${HDE_dir}/examples/dcps/standalone/Java/Tutorial/chatroom
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/Java/SAJ/*.idl" \
            ${HDE_dir}/examples/dcps/standalone/Java/Tutorial
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/Java/SAJ/chatroom/*.java" \
            ${HDE_dir}/examples/dcps/standalone/Java/Tutorial/chatroom
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Tutorial/Java/SAJ/BUILD${suffix_script} \
            ${HDE_dir}/examples/dcps/standalone/Java/Tutorial
        if [ "${target}" != "x86.win32" ]
        then
           install_ascii_file "${OSPL_HOME}/examples/dcps/Tutorial/Java/SAJ/README.txt" \
               ${HDE_dir}/examples/dcps/standalone/Java/Tutorial
        else
           install_ascii_file "${OSPL_HOME}/examples/dcps/Tutorial/Java/SAJ/README_x86.win32.txt" \
               ${HDE_dir}/examples/dcps/standalone/Java/Tutorial README.txt
        fi

        echo "*           Ready"

        echo "*         For JacORB Corba Java"
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/JacORB
        echo "*           For PingPong... "
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/*.idl" \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/*.java" \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/PingPong
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/BUILD${suffix_script} \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/PingPong
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/RUN${suffix_script} \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/*.txt" \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/PingPong
        echo "*           Ready"
        echo "*           For Tutorial... "
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial/chatroom
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/*.idl" \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/chatroom/*.java" \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial/chatroom
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/BUILD${suffix_script} \
            ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial
        if [ "${target}" != "x86.win32" ]
        then
           install_ascii_file "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/README.txt" \
               ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial
        else
           install_ascii_file "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/README_x86.win32.txt" \
               ${HDE_dir}/examples/dcps/CORBA/Java/JacORB/Tutorial README.txt
        fi
        echo "*        JacORB CORBA  Ready"

        echo "*         For RTORB Corba Java"
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/RTORB
        echo "*           For PingPong... "
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/*.idl" \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/*.java" \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/PingPong
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/BUILD_rtorb${suffix_script} \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/PingPong BUILD${suffix_script}
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/RUN${suffix_script} \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/PingPong
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Java/CJ/JacORB/*.txt" \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/PingPong
        echo "*           Ready"
        echo "*           For Tutorial... "
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial
        mkdir ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial/chatroom
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/*.idl" \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial
        install_ascii_fileset "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/chatroom/*.java" \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial/chatroom
        install_ascii_file    ${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/BUILD_rtorb${suffix_script} \
            ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial BUILD${suffix_script}
        if [ "${target}" != "x86.win32" ]
        then
           install_ascii_file "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/README.txt" \
               ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial
        else
           install_ascii_file "${OSPL_HOME}/examples/dcps/Tutorial/Java/CJ/JacORB/README_x86.win32.txt" \
               ${HDE_dir}/examples/dcps/CORBA/Java/RTORB/Tutorial README.txt
        fi
        echo "*         RTORB Java CORBA Ready"
        echo "*         Java Ready"
    fi

    echo "*       DCPS Ready"
    echo "*     Copy examples Ready"

    #
    # Copy in ospli src for distro
    #
    printf "*     Creating source release ... "
    mkdir ${HDE_dir}/src
    sleep 600 &
    TMP_PID=$!
    mkdir /tmp/$TMP_PID
    OSPL_SRC=/tmp/$TMP_PID/OpenSpliceDDS
    (PATH=/bin:/usr/bin:/usr/local/bin:$PATH git clone $OSPL_HOME $OSPL_SRC  > /dev/null 2>&1)
    rm -rf $OSPL_SRC/.git
    rm -rf $OSPL_SRC/docs
    rm -f $OSPL_SRC/.gitignore
    rm -f $OSPL_SRC/.gitattributes
    BUILD=buildTarGZ
    if [ "${target}" = "x86.win32" ]
    then
        BUILD=buildZip
    fi
    (
        cd $OSPL_SRC/..
        $BUILD ${HDE_dir}/src/OpenSpliceDDS-src OpenSpliceDDS
    )
    rm -rf /tmp/$TMP_PID
    echo "Ready"

    #
    # Platform specific redistributables
    #

    if [ "${SOURCE_HOST_SHORT}" = "win" ]
    then
        printf "*     Copy redistributable system packages ... "
        mkdir ${HDE_dir}/redist
        cp -r "${FrameworkSDKDir}/BootStrapper/Packages/vcredist_x86" "${HDE_dir}/redist"
        cp "${OSPL_HOME}/install/bin/install_vcredist.bat" "${HDE_dir}/redist/vcredist_x86"
        echo "Ready"
    fi

    if [ "${host}" != "x86.win32" ]
    then
        printf "*     Prepare default release.com ... "
        RELF=${HDE_dir}/release.com
        echo "echo \"<<< OpenSplice HDE Release ${target_version} For ${target}${target_env}, Date ${target_date} >>>\"" >> ${RELF}
        echo 'if [ "$SPLICE_ORB" = "" ]' >> ${RELF}
        echo "then" >> ${RELF}
        echo "    SPLICE_ORB=DDS_OpenFusion_1_6_1" >> ${RELF}
        echo "    export SPLICE_ORB" >> ${RELF}
        echo "fi"  >> ${RELF}
        echo 'if [ "$SPLICE_JDK" = "" ]' >> ${RELF}
        echo "then" >> ${RELF}
        if [ "${JAVA_IS_PERC}" = "yes" ]
        then
            echo "    SPLICE_JDK=perc" >> ${RELF}
        else
            echo "    SPLICE_JDK=jdk" >> ${RELF}
        fi
        echo "    export SPLICE_JDK" >> ${RELF}
        echo "fi"  >> ${RELF}
        echo "OSPL_HOME=\"@@INSTALLDIR@@/HDE/${target}${target_env}\"" >> ${RELF}
        echo "OSPL_TARGET=${target}${target_env}" >> ${RELF}
        echo "PATH=\$OSPL_HOME/bin:\$PATH" >> ${RELF}
        if [ "${SPLICE_TARGET}" != "${SPLICE_HOST}" ]
        then
            echo "LD_LIBRARY_PATH=\$OSPL_HOME/host/lib:\$LD_LIBRARY_PATH" >> ${RELF}
        else
            echo "LD_LIBRARY_PATH=\$OSPL_HOME/lib:\$LD_LIBRARY_PATH" >> ${RELF}
        fi
        echo "CPATH=\$OSPL_HOME/include:\$OSPL_HOME/include/sys:\$CPATH" >> ${RELF}
        echo "OSPL_TMPL_PATH=\$OSPL_HOME/etc/idlpp" >> ${RELF}
        echo "OSPL_URI=file://\$OSPL_HOME/etc/config/ospl.xml" >> ${RELF}
        echo ". \$OSPL_HOME/etc/java/defs.\$SPLICE_JDK" >> ${RELF}
        if [ "${INCLUDE_API_DCPS_SAJ}" = "yes" ]
        then
            echo "CLASSPATH=\$OSPL_HOME/jar/dcpssaj.jar:\$CLASSPATH" >> $RELF
        fi
        if [ "${INCLUDE_API_DCPS_CJ}" = "yes" ]
        then
            echo "CLASSPATH=\$OSPL_HOME/jar/dcpscj.jar:\$CLASSPATH" >> $RELF
        fi
        echo "export CLASSPATH OSPL_HOME OSPL_TARGET PATH LD_LIBRARY_PATH CPATH OSPL_TMPL_PATH OSPL_URI" >> $RELF

        if [ "$VALGRIND" = "yes" ]
        then
            cat $OSPL_HOME/bin/valgrind_cmds >> $RELF
        fi
        if [ -z "$OSPL_OUTER_HOME" ]
        then
            echo "\$@" >> $RELF
        fi
        echo "Ready"
    else
        printf "*     Prepare default release.bat ... "
        RELF=${HDE_dir}/release.bat
        echo "@echo off" >> $RELF
        echo "echo \"<<< OpenSplice HDE Release ${target_version} For ${target}${target_env}, Date ${target_date} >>>\"" >> ${RELF}
        echo "if \"%SPLICE_ORB%\"==\"\" set SPLICE_ORB=DDS_OpenFusion_1_6_1" >> $RELF
        echo "set OSPL_HOME=%~dp0" >> $RELF
        echo "set OSPL_TARGET=${target}${target_env}" >> $RELF
        if [ "${SPLICE_TARGET}" != "${SPLICE_HOST}" ]
        then
            echo "set PATH=%OSPL_HOME%\bin;%OSPL_HOME%\host\lib;%PATH%" >> $RELF
        else
            echo "set PATH=%OSPL_HOME%\bin;%OSPL_HOME%\lib;%OSPL_HOME%\examples\lib;%PATH%" >> $RELF
        fi
        echo "set OSPL_TMPL_PATH=%OSPL_HOME%\etc\idlpp" >> $RELF
        echo "set OSPL_URI=\"file://%OSPL_HOME%\etc\config\ospl.xml\"" >> $RELF
        if [ "${INCLUDE_API_DCPS_SAJ}" = "yes" ]
        then
            echo "set CLASSPATH=%OSPL_HOME%\jar\dcpssaj.jar;%CLASSPATH%" >> $RELF
        fi
        if [ "${INCLUDE_API_DCPS_CJ}" = "yes" ]
        then
            echo "set CLASSPATH=%OSPL_HOME%\jar\dcpscj.jar;%CLASSPATH%" >> $RELF
        fi
        if [ -z "$OSPL_OUTER_HOME" ]
        then
            echo "%*" >> $RELF
        fi

        echo "Ready"
    fi
}

install_rts_target ()
{
    target_os=`expr "${target}" : '[a-zA-Z0-9]*\.\([a-zA-Z]*\)'`

    mkdir -p ${RTS_dir}

    #
    # Copy general license file
    #
    printf "*     Copy General LICENSE file in place "
    cp ${OSPL_HOME}/LICENSE ${RTS_dir}/.
    echo "Ready"

    #
    # Copy default configuration file for OpenSplice
    #
    printf "*     Copy OpenSplice default configuration file "
    mkdir -p ${RTS_dir}/etc
    mkdir -p ${RTS_dir}/etc/config
    sed -e "s/__RELEASE__/${target_version}/g" \
        -e "s/__EXE__/${target_suffix_exe}/g" \
        ${OSPL_HOME}/etc/ospl.xml > ${RTS_dir}/etc/config/ospl.xml
    #
    # Copy in the buildinfo if produced from the scoreboard
    #
    if [ -f "${OSPL_HOME}/etc/BUILDINFO" ]
    then
        cp ${OSPL_HOME}/etc/BUILDINFO ${RTS_dir}/etc/.
    fi
    echo "Ready"

    # java definitions

    mkdir -p ${RTS_dir}/etc/java
    cp ${OSPL_HOME}/etc/java/defs.jdk ${RTS_dir}/etc/java

    # done with etc dir

    #
    # Copy in the releaseinfo file
    #
    if [ -f "${OSPL_HOME}/release_info/RELEASE" ]
    then
        cp ${OSPL_HOME}/release_info/RELEASE ${RTS_dir}/etc/RELEASEINFO
    fi
    echo "Ready"

    #
    # Copy library files
    #
    printf "*     Copy library files ... "
    release=${OSPL_HOME}/lib/${target}${source_env}
    if [ -d "${release}" ]
    then
        mkdir -p ${RTS_dir}/lib
        install_dir ${release} ${RTS_dir} lib
        # remove cpp lib
        rm -f ${RTS_dir}/lib/*ddscpp*
        rm -f ${RTS_dir}/lib/*ddslic*
        # remove all windows .lib files
        if [ "${target}" = "x86.win32" ]; then
          rm -f ${RTS_dir}/lib/*.lib
        fi
    else
        echo "* ##    No library files detected"
    fi
    echo "Ready"

    #
    # Copy java archive files
    #
    if [ "${target_os}" != "vxworks" ]
    then
        echo "*     Copy JAVA archive files"
        release=${OSPL_HOME}/jar/${target}${source_env}
        if [ -d "${release}" ]
        then
            mkdir -p ${RTS_dir}/jar
            install_dir ${release} ${RTS_dir} jar
            rm -f ${RTS_dir}/jar/openorb*
        else
            echo "* ##    No JAVA archive files detected"
        fi
        echo "*     JAVA archive Ready"
    fi

    #
    # Copy script files
    #
    echo "*     Copy script files"
    release=${OSPL_HOME}/install/bin
    if [ -d "${release}" ]
    then
        mkdir -p ${RTS_dir}/bin
        install_ascii_file "${release}/osplconf${suffix_script}" "${RTS_dir}/bin"
        if [ "${host}" = "x86.win32" ]
        then
            if [ "${target}" = "x86.win32" ]
            then
                install_ascii_file "${release}/osplctrl${suffix_script}" "${RTS_dir}/bin"
                if [ "${INCLUDE_TOOLS_MMSTAT}" = "yes" ]
                then
                    install_ascii_file "${release}/osplmmstat${suffix_script}" "${RTS_dir}/bin"
                fi
            fi
            install_ascii_file "${release}/run.vbs" "${RTS_dir}/bin"
        fi
    else
        echo "* ##    No script files detected"
    fi
    echo "*     Script files Ready"

    #
    # Copy executable files
    #
    echo "*     Copy OpenSplice executables"
    release=${OSPL_HOME}/exec/${target}${source_env}
    if [ -d "${release}" ]
    then
        mkdir -p ${RTS_dir}/bin
        if [ "${SOURCE_TARGET_SHORT}" != "int" ]
        then
            install_bin_file ${release} ${RTS_dir} bin spliced${target_suffix_exe}
            # See DDS1787
            if [ "$SPLICE_TARGET" != "x86.linux2.6-shmt_dev" ]
            then
                install_bin_file ${release} ${RTS_dir} bin networking${target_suffix_exe}
                install_bin_file ${release} ${RTS_dir} bin durability${target_suffix_exe}
                if [ "${INCLUDE_SERVICES_DDSI}" = "yes" ]
                then
                    install_bin_file ${release} ${RTS_dir} bin ddsi2${target_suffix_exe}
                fi
            fi

            if [ "${INCLUDE_TOOLS_OSPL}" = "yes" ]
            then
                install_bin_file ${release} ${RTS_dir} bin ospl${target_suffix_exe}
            fi
            if [ "${INCLUDE_TOOLS_SHMDUMP}" = "yes" ]
            then
                install_bin_file ${release} ${RTS_dir} bin shmdump${target_suffix_exe}
            fi
            if [ "$INCLUDE_TOOLS_MMSTAT" = "yes" ]
            then
                install_bin_file ${release} ${RTS_dir} bin mmstat${target_suffix_exe}
            fi
        fi

        pdbfiles=`ls ${OSPL_HOME}/exec/${target}${source_env}/*.pdb 2>/dev/null`
        if [ "${target}" = "x86.win32" ] && [ -n "${pdbfiles}" ]
        then
            cp ${pdbfiles} ${RTS_dir}/bin
        fi
    else
        echo "* ##    No executable files detected"
    fi

    # Windows service installer copy
    if [ "${target}" = "x86.win32" ]
    then
        # Put all the *.pdb's into the bin directory iff this is win32.
        mv ${RTS_dir}/lib/*.dll ${RTS_dir}/bin/.  >& /dev/null
        mv ${RTS_dir}/lib/*.netmodule ${RTS_dir}/bin/.  >& /dev/null
        mv ${RTS_dir}/lib/*.pdb ${RTS_dir}/bin/.  >& /dev/null
    fi

    #
    # Copy documentation
    #
    echo "*     Copy documentation"
    cp -r ${OSPL_HOME}/docs ${RTS_dir}
    install_ascii_file "${OSPL_HOME}/index.html" "${RTS_dir}"
    # remove documentation that does not apply to RTS
    rm -f ${RTS_dir}/docs/pdf/OpenSplice_PreProcessor_usermanual.pdf
    rm -f ${RTS_dir}/docs/pdf/OpenSplice_refman*.pdf
    rm -f ${RTS_dir}/docs/pdf/OpenSplice_Tutorial*.pdf
    rm -f ${RTS_dir}/docs/pdf/OpenSplice_V3_V4_Migration_Guide.pdf

    #
    # Platform specific redistributables
    #

    if [ "${SOURCE_HOST_SHORT}" = "win" ]
    then
        printf "*     Copy redistributable system packages ... "
        mkdir ${RTS_dir}/redist
        cp -r "${FrameworkSDKDir}/BootStrapper/Packages/vcredist_x86" "${RTS_dir}/redist"
        cp "${OSPL_HOME}/install/bin/install_vcredist.bat" "${RTS_dir}/redist/vcredist_x86"
        echo "Ready"
    fi

    #
    # Create and sign a Global Assembly for the SACS Dll
    #
    if [ "${target}" = "x86.win32" ]
    then
       printf "*     Create and sign a Global Assembly for the SACS DLL ..."
       cskeyfile=`cygpath -d "${OSPL_HOME}/src/api/dcps/sacs/dcpssacs.snk"`
       csoutdir=`cygpath -d "${RTS_dir}/bin/"`
       csmodfile=`cygpath -d "${OSPL_HOME}/lib/${target}${source_env}/dcpssacs.netmodule"`
       csoutfile="${csoutdir}${CS_ASSEMBLY_NAME}.dll"

       al /t:library /keyfile:"${cskeyfile}" /v:${CS_DLL_VERSION} /out:"${csoutfile}" "${csmodfile}"
    fi
    # This needs to be changed when we support C# for linux and add an else part
    # that will set all these variables correctly and call the appropriate mono
    # executable for the assembly linker.
    echo "*     Ready"

    if [ "${target}" != "x86.win32" ]
    then
        printf "*     Prepare default release.com ... "
        RELF=${RTS_dir}/release.com
        echo "echo \"<<< OpenSplice RTS Release ${target_version} For ${target}${target_env} Date ${target_date} >>>\"" >> $RELF
        echo 'if [ "$SPLICE_ORB" = "" ]' >> $RELF
        echo "then" >> $RELF
        echo "    SPLICE_ORB=DDS_OpenFusion_1_6_1" >> $RELF
        echo "    export SPLICE_ORB" >> $RELF
        echo "fi"  >> $RELF
        echo 'if [ "$SPLICE_JDK" = "" ]' >> ${RELF}
        echo "then" >> ${RELF}
        if [ "${JAVA_IS_PERC}" = "yes" ]
        then
            echo "    SPLICE_JDK=perc" >> ${RELF}
        else
            echo "    SPLICE_JDK=jdk" >> ${RELF}
        fi
        echo "    export SPLICE_JDK" >> ${RELF}
        echo "fi"  >> ${RELF}
        echo "OSPL_HOME=\"@@INSTALLDIR@@/RTS/${target}${target_env}\"" >> $RELF
        echo "OSPL_TARGET=${target}${target_env}" >> $RELF
        echo "PATH=\$OSPL_HOME/bin:\$PATH" >> $RELF
        echo "LD_LIBRARY_PATH=\$OSPL_HOME/lib:\$LD_LIBRARY_PATH" >> $RELF
        echo "OSPL_URI=file://\$OSPL_HOME/etc/config/ospl.xml" >> $RELF
        echo ". \$OSPL_HOME/etc/java/defs.\$SPLICE_JDK" >> ${RELF}
        if [ "${INCLUDE_API_DCPS_SAJ}" = "yes" ]
        then
            echo "CLASSPATH=\$OSPL_HOME/jar/dcpssaj.jar:\$CLASSPATH" >> $RELF
        fi
        if [ "${INCLUDE_API_DCPS_CJ}" = "yes" ]
        then
            echo "CLASSPATH=\$OSPL_HOME/jar/dcpscj.jar:\$CLASSPATH" >> $RELF
        fi
        echo "export CLASSPATH OSPL_HOME OSPL_TARGET PATH LD_LIBRARY_PATH OSPL_URI" >> $RELF
        if [ -z "$OSPL_OUTER_HOME" ]
        then
            echo "\$@" >> $RELF
        fi
        echo "Ready"
    else
        printf "*     Prepare default release.bat ... "
        RELF=${RTS_dir}/release.bat
        echo "@echo off" >> $RELF
        echo "if \"%SPLICE_ORB%\"==\"\" set SPLICE_ORB=DDS_OpenFusion_1_6_1" >> $RELF
        echo "set OSPL_HOME=%~dp0" >> $RELF
        echo "set OSPL_TARGET=${target}${target_env}" >> $RELF
        echo "set PATH=%OSPL_HOME%\bin;%OSPL_HOME%\lib;%PATH%" >> $RELF
        echo "set OSPL_TMPL_PATH=%OSPL_HOME%\etc\idlpp" >> $RELF
        echo "set OSPL_URI=\"file://%OSPL_HOME%\etc\config\ospl.xml\"" >> $RELF
        if [ "${INCLUDE_API_DCPS_SAJ}" = "yes" ]
        then
            echo "set CLASSPATH=%OSPL_HOME%\jar\dcpssaj.jar;%CLASSPATH%" >> $RELF
        fi
        if [ "${INCLUDE_API_DCPS_CJ}" = "yes" ]
        then
            echo "set CLASSPATH=%OSPL_HOME%\jar\dcpscj.jar;%CLASSPATH%" >> $RELF
        fi
        if [ -z "$OSPL_OUTER_HOME" ]
        then
            echo "%*" >> $RELF
        fi
        echo "Ready"
    fi
}
