
#include "v_kernel.odl"


/**
 * \file durability.odl
 * Defines the protocol messages for the durability service.
 *  
 */
module durabilityModule2 {
    typedef c_time   d_timestamp;
    typedef c_time   d_quality;
    typedef c_string d_name;
    typedef c_string d_partition;
    typedef c_string d_topic;
   
    struct d_networkAddress_s {
        c_ulong systemId;
        c_ulong localId;
        c_ulong lifecycleId;
    };
    
    enum d_serviceState {
        D_STATE_INIT,   
        D_STATE_DISCOVER_FELLOWS_GROUPS,  
        D_STATE_DISCOVER_LOCAL_GROUPS,
        D_STATE_DISCOVER_PERSISTENT_SOURCE, 
        D_STATE_INJECT_PERSISTENT,  
        D_STATE_FETCH_INITIAL,
        D_STATE_COMPLETE,
        D_STATE_FETCH,
        D_STATE_ALIGN,
        D_STATE_FETCH_ALIGN,
        D_STATE_TERMINATING,
        D_STATE_TERMINATED  
    };
   
    enum d_completeness {
        D_GROUP_KNOWLEDGE_UNDEFINED,
        D_GROUP_UNKNOWN,            
        D_GROUP_INCOMPLETE,         
        D_GROUP_COMPLETE            
    };
   
    enum d_durabilityKind {
        D_DURABILITY_VOLATILE,      
        D_DURABILITY_TRANSIENT_LOCAL,
        D_DURABILITY_TRANSIENT,      
        D_DURABILITY_PERSISTENT,     
        D_DURABILITY_ALL
    };
   
    enum d_alignmentKind {
        D_ALIGNEE_INITIAL, 
        D_ALIGNEE_LAZY,
        D_ALIGNEE_ON_REQUEST
    };

	enum d_mergePolicy {
		D_MERGE_IGNORE,
		D_MERGE_MERGE,
		D_MERGE_DELETE,
		D_MERGE_REPLACE
	};
	
	struct d_mergeState_s {
	    d_name role;
	    c_ulong value;
	};
   
    struct d_message_s {
        d_networkAddress_s addressee;           /* the destination         */
        d_networkAddress_s senderAddress;       /* the source              */
        d_serviceState     senderState;         /* the state of the source */
        d_timestamp        productionTimestamp; /* time at sender          */
        c_ulong            sequenceNumber;      /* count of messages per type per sender */
    };

    struct d_groupsRequest_s {
        d_message_s        parentMsg;
        d_partition        partition;
        d_topic            topic;
    };
   
    struct d_statusRequest_s {
        d_message_s        parentMsg;
    };
   
    struct d_status_s {
        d_message_s        parentMsg;
    };
   
    struct d_nameSpacesRequest_s{
        d_message_s        parentMsg;
    };
    
    struct d_nameSpaces_s{
        d_message_s              parentMsg;
		c_string		         name;
        c_string                 partitions;
        d_durabilityKind         durabilityKind;
		c_bool			         aligner;
        d_alignmentKind          alignmentKind;
        d_quality                initialQuality;
        c_ulong                  total;
        d_networkAddress_s       master;
        c_bool                   isComplete;
        c_bool                   masterConfirmed; 
        d_mergeState_s           state;
        sequence<d_mergeState_s> mergedStates;
        c_ulong                  mergedStatesCount;
    };
   
    struct d_sampleRequest_s {
        d_message_s        parentMsg;
        d_partition        partition;
        d_topic            topic;
        d_durabilityKind   durabilityKind;
        d_timestamp        requestTime;
        c_bool             withTimeRange;
        d_timestamp        beginTime;
        d_timestamp        endTime;
        d_networkAddress_s source;
        c_string           filter;
        sequence<c_string> filterParams;
        c_ulong            filterParamsCount;
        c_long             maxSamples;
        c_long             maxInstances;
        c_long             maxSamplesPerInstance;
    };
   
    struct d_newGroup_s {
        d_message_s       parentMsg;
        d_partition       partition;
        d_topic           topic;
        d_completeness    completeness;
        d_durabilityKind  durabilityKind;
        d_quality         quality;
        c_ulong           alignerCount;
    };
   
    struct d_sampleChainBead {
        sequence<c_octet> value;
        c_long            size;
    };
   
    struct d_sampleChainTrailer {
        c_ulong           nrSamples;
        d_completeness    completeness;
    };
   
    struct d_sampleChain_s {
        d_message_s                  parentMsg;
        c_string                     partition;
        c_string                     topic;
        d_durabilityKind             durabilityKind;
        sequence<d_networkAddress_s> addressees;
        c_ulong                      addresseesCount;
        d_networkAddress_s           source;
       
        union messageContent switch ( enum content { BEAD, LINK } )
        {
            case BEAD:
                d_sampleChainBead    bead;
            case LINK:
                d_sampleChainTrailer link;
        } msgBody;
    };
   
    struct d_deleteData_s {
        d_message_s        parentMsg;
        d_timestamp        actionTime;
        c_string           partitionExpr;
        c_string           topicExpr;
    };


    /*************************************/
    /* For storage in Memory Mapped File */
    /*************************************/
    
    /* Because 'newest' is typed in d_instance c_free will free the
     * newest sample and because 'older' is typed in d_sample, all samples
     * will be freed as well.
     */
    class d_sample {
        attribute c_voidp instance;
        attribute d_sample older;
        attribute c_voidp newer;
    };
    
    class d_sampleTemplate extends d_sample {
        attribute kernelModule::v_message message;
    };

    class d_instance {
        attribute c_ulong state;
        attribute c_long  messageCount; /* only write messages */
        attribute c_long  count; /* write AND disposed messages */
        attribute c_voidp oldest;
    };
    
    class d_instanceTemplate extends d_instance {
        attribute d_sampleTemplate newest;
    };

    class d_storeMMFKernel;
    
    class d_topicInfo {
        attribute c_string                 name;
        attribute c_string                 typeName;
        attribute c_type                   dataType;
        attribute c_type                   messageType;
        attribute c_type                   sampleType;
        attribute c_type                   instanceType;
        attribute c_string                 instanceKeyExpr;
        attribute c_string                 keyExpr;
        attribute c_type                   keyType;
        attribute kernelModule::v_topicQos qos;
    };

    class d_groupInfo {
        attribute c_voidp kernel;
        attribute d_topicInfo topic;
        attribute d_partition partition;
        attribute d_completeness completeness;
        attribute d_quality quality;
        attribute SET<d_instance> instances;      /* table, keys values as keys */
    };
    
    class d_nameSpaceInfo {
        attribute d_name name;
        attribute c_bool complete;
    };

    /* Kernel for d_storeMMF */
    class d_storeMMFKernel {
        attribute SET<d_groupInfo>     groups;  /* table, topic+partition as keys */
        attribute SET<d_topicInfo>     topics;  /* table, topic name as key */
        attribute SET<d_nameSpaceInfo> nameSpaces; /* table, name as key */
        attribute SET<d_groupInfo>     backup;  /* table, topic+partition as keys */
    };

};
