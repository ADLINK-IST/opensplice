# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ccpp_alldatadisposedlistener_dds1619_idl
#
# $Id: prism.mpd,v 1.4 2009-05-15 09:09:51 vz Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.ccpp_alldatadisposedlistener_dds1619_idl
DEPENDENCY_FILE  = .depend.ccpp_alldatadisposedlistener_dds1619_idl

FILES = \

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)

PRJ_TYPE = library

INSLIB ?= .
ifeq ($(INSLIB),.)
  ifeq  ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)


# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/ccpp_alldatadisposedlistener_dds1619_idl
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif


include $(TAO_ROOT)/include/makeinclude/macros.GNU
include $(TAO_ROOT)/include/makeinclude/rules.common.GNU
include $(TAO_ROOT)/include/makeinclude/rules.nonested.GNU
include $(TAO_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L.
else
LDFLAGS      += -L.
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo ccpp_alldatadisposedlistener_dds1619_idl will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib
PATH              := $(PATH):$(ACE_ROOT)/lib

GENERATED_DIRTY += SpaceC.inl SpaceS.inl SpaceC.h SpaceS.h SpaceC.cpp SpaceS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) Space.idl -nt SpaceC.inl 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceS.inl 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceC.h 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceS.h 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceC.cpp 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
SpaceC.inl SpaceS.inl SpaceC.h SpaceS.h SpaceC.cpp SpaceS.cpp: Space.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -Sa -St -I "$(OSPL_HOME)/etc/idl" -Sp Space.idl

GENERATED_DIRTY += SpaceDcpsC.inl SpaceDcpsS.inl SpaceDcpsC.h SpaceDcpsS.h SpaceDcpsC.cpp SpaceDcpsS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) SpaceDcps.idl -nt SpaceDcpsC.inl 2> /dev/null && $(TEST_EXE) SpaceDcps.idl -nt SpaceDcpsS.inl 2> /dev/null && $(TEST_EXE) SpaceDcps.idl -nt SpaceDcpsC.h 2> /dev/null && $(TEST_EXE) SpaceDcps.idl -nt SpaceDcpsS.h 2> /dev/null && $(TEST_EXE) SpaceDcps.idl -nt SpaceDcpsC.cpp 2> /dev/null && $(TEST_EXE) SpaceDcps.idl -nt SpaceDcpsS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceDcpsC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceDcpsS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceDcpsC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceDcpsS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceDcpsC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt SpaceDcpsS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
SpaceDcpsC.inl SpaceDcpsS.inl SpaceDcpsC.h SpaceDcpsS.h SpaceDcpsC.cpp SpaceDcpsS.cpp: SpaceDcps.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -Sa -St -I "$(OSPL_HOME)/etc/idl" -Sp SpaceDcps.idl

GENERATED_DIRTY += SpaceSplDcps.h SpaceDcps_impl.h SpaceSplDcps.cpp SpaceDcps_impl.cpp ccpp_Space.h SpaceDcps.idl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) Space.idl -nt SpaceSplDcps.h 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceDcps_impl.h 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceSplDcps.cpp 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceDcps_impl.cpp 2> /dev/null && $(TEST_EXE) Space.idl -nt ccpp_Space.h 2> /dev/null && $(TEST_EXE) Space.idl -nt SpaceDcps.idl 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
SpaceSplDcps.h SpaceDcps_impl.h SpaceSplDcps.cpp SpaceDcps_impl.cpp ccpp_Space.h SpaceDcps.idl: Space.idl
	"$(OSPL_HOME)/bin/idlpp" -I "$(OSPL_HOME)/etc/idl" -C -l cpp -b CCPP/$(SPLICE_ORB) Space.idl

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
all: $(GENERATED_DIRTY)
endif

ADDITIONAL_IDL_TARGETS += Space$(IDL_CLIENT_HDR_EXT) SpaceDcps$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

