# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ccpp_alldatadisposedlistener_dds1619_proc1
#
# $Id: prism.mpd,v 1.4 2009-05-15 09:09:51 vz Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.ccpp_alldatadisposedlistener_dds1619_proc1
DEPENDENCY_FILE  = .depend.ccpp_alldatadisposedlistener_dds1619_proc1
BIN_UNCHECKED    = ccpp_alldatadisposedlistener_dds1619_proc1


FILES = \
  dds1619_A_proc1.cpp \
  SpaceC.cpp \
  SpaceDcpsC.cpp \
  SpaceDcps_impl.cpp \
  SpaceSplDcps.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
override no_hidden_visibility = 1

LDLIBS = -lospl_testlib -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE -ldcpsccpp -ldcpsgapi -lddsuser -lddskernel -lddsserialization -lddsconfparser -lddsconf -lddsdatabase -lddsutil -lddsos
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)

PRJ_TYPE = rtp

INSBIN ?= .
ifeq ($(INSBIN),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSBIN)

include $(TAO_ROOT)/include/makeinclude/prism.GNU

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/ccpp_alldatadisposedlistener_dds1619_proc1
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,ospl_testlib TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(OSPL_HOME)/lib $(ACE_ROOT)/lib ../testlibs /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),ospl_testlib TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
else
  all: lib_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(TAO_ROOT)/include/makeinclude/macros.GNU
include $(TAO_ROOT)/include/makeinclude/rules.common.GNU
include $(TAO_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(OUTPUT_DIRECTORY),)
ifneq ($(OUTPUT_DIRECTORY),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/%$(VAR)$(EXEEXT))
endif
endif

include $(TAO_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L$(OSPL_HOME)/lib -L$(ACE_ROOT)/lib -L../testlibs
else
LDFLAGS      += -L. -L$(OSPL_HOME)/lib -L$(ACE_ROOT)/lib -L../testlibs
endif
CPPFLAGS     += -I$(OSPL_HOME)/include/dcps/C++/CCPP -I$(OSPL_HOME)/include/dcps/C++/CCPP/$(SPLICE_ORB) -I$(OSPL_HOME)/include -I$(OSPL_HOME)/include/sys -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(TAO_ROOT)/include -I..
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo ccpp_alldatadisposedlistener_dds1619_proc1 will not be built due to the following missing library:
	@echo $(LIBCHECK)

require_warning:
	@echo ccpp_alldatadisposedlistener_dds1619_proc1 will not be built due to one of the following disabled make macros:
	@echo exceptions

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib
PATH              := $(PATH):$(ACE_ROOT)/lib

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),true)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, ospl_testlib TAO_PortableServer TAO_AnyTypeCode TAO ACE dcpsccpp dcpsgapi ddsuser ddskernel ddsserialization ddsconfparser ddsconf ddsdatabase ddsutil ddsos, $(foreach libpath, . $(OSPL_HOME)/lib $(ACE_ROOT)/lib ../testlibs, $(wildcard $(libpath)/lib$(lib).a)))
  endif
endif

$(BIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $^ $(VLDLIBS) $(POSTLINK)
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

