<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<!--
    run_dds1659_test.xml - Run the dds 1659 test using STAX

-->

<stax>

  <defaultcall function="dds1659_main">
  </defaultcall>

  <function name="dds1659_main" scope="local" >
    <function-prolog>
      Test runs OSPL on three Linux nodes.
    </function-prolog>

    <function-list-args>
      <function-required-arg name="host_name1">
        The host name of the node 1 you wish test on e. 'rhel62a'
      </function-required-arg>
      <function-optional-arg name="ospl_start" default="'HDE'">
        Leaving this as 'HDE' seems to work - no idea what it's for 
      </function-optional-arg>
      <function-optional-arg name="test_root1" default="'/home/dds/log'">
        Location of log directory on node 1 - where output logs will go
      </function-optional-arg>
      <function-optional-arg name="osplo_home1" default="'/home/dds/FrameworkTests/osplo'">
        Location of osplo root on node 1 
      </function-optional-arg>
      <function-optional-arg name="ospli_home1" default="'/home/dds/FrameworkTests/ospli'">
        Location of ospli root on node 1 
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name1" default="'x86.linux-release'">
        ospl target e.g. x86.linux-release / x86_64.linux-release
      </function-optional-arg>
      <function-optional-arg name="ospl_inst_home1" default="'/home/dds/PrismTech/OpenSpliceDDS/V6.4.0/HDE/x86.linux'">
        Location of OpenSplice installation on node 1
      </function-optional-arg>
      
      <function-optional-arg name="host_name2" default="'rhel62-64a'">
        The host name of the node 2 you wish to test on e.g. 'rhel62-64a'
      </function-optional-arg>
      <function-optional-arg name="test_root2" default="'/home/dds/log'">
        Location of log directory on node 2 - where output logs will go
      </function-optional-arg>
      <function-optional-arg name="osplo_home2" default="'/home/dds/osplo'">
        Location of osplo root on node 2
      </function-optional-arg>
      <function-optional-arg name="ospli_home2" default="'/home/dds/ospli'">
        Location of ospli root on node 2 
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name2" default="'x86_64.linux-release'">
        ospl target e.g. x86_64.linux-release
      </function-optional-arg>
      <function-optional-arg name="ospl_inst_home2" default="'/home/dds/PrismTech/OpenSpliceDDS/V6.4.0/HDE/x86_64.linux'">
        Location of OpenSplice installation on node 2
      </function-optional-arg>
      
      <function-optional-arg name="host_name3" default="'rhel60a'">
        The host name of the node 3 
      </function-optional-arg>
      <function-optional-arg name="test_root3" default="'/home/dds/log'">
        Location of log directory on node 3 - where output logs will go
      </function-optional-arg>
      <function-optional-arg name="osplo_home3" default="'/home/dds/osplo'">
        Location of osplo root on node 2
      </function-optional-arg>
      <function-optional-arg name="ospli_home3" default="'/home/dds/ospli'">
        Location of osplo root on node 3 
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name3" default="'x86.linux-release'">
         ospl target e.g. x86_64.linux-release
      </function-optional-arg>
      <function-optional-arg name="ospl_inst_home3" default="'/home/dds/PrismTech/OpenSpliceDDS/V6.4.0/HDE/x86.linux'">
         Location of OpenSplice installation on node 3
      </function-optional-arg>
      
      <function-optional-arg name="staf_port_1" default="'6500'">
        Staf port on the machine 1 in double or single quotes
      </function-optional-arg>
      <function-optional-arg name="staf_port_2" default="'6500'">
        Staf port on the machine 2 in double or single quotes
      </function-optional-arg>
      <function-optional-arg name="staf_port_3" default="'6500'">
        Staf port on the machine 3 in double or single quotes
      </function-optional-arg>
    </function-list-args>
    
    <sequence>
        <import file="'../../stax/test_ospl.xml'"/>
        <import file="'dds1659_test_functions.xml'"/>
        <try>
            <sequence>
                <call function="'Initialise'" />        
        
                <script>
                    import time
                    # Add the "./common/python" directory into the Python module path:
                    the_script_current_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(local_file_sep)]
                    sys.path.append(the_script_current_dir + local_file_sep + "common" +local_file_sep + "python")
                    # Import the test classes definitions:
                    from ext_process                  import *
                    from log_result                   import *
                    from coflight_test_scenario       import *

                    test_name = "DDS1659"
                    ospli_name  = "ospli"
                    osplo_name  = "osplo"
                    start_script_name  =  "envs-"
                    ext_script_name  =  "sh"
                    testsuite_name = "testsuite"
                    rbt_name = "rbt"
                    services_name = "services"
                    exec_name = "exec"
                    networking_name = "networking"
                    test_dir_name = "dds1659"

                    test_scenario = CoFlightTestScenario(test_name, "CO-Flight requirements test DDS1659", q_steps = 2)
            
                    release_script_names = []
                    ospl_release_names = []
                    osplo_homes = []
                    ospli_homes = []
                    ospl_inst_homes = []
                    #host 1
                    host1 = test_scenario.define_host(test_root = test_root1, ospl_home = "default", host_name = host_name1, staf_port = staf_port_1)
                    file_path_separator1 = host1.get_file_sep()
                    release_script_name1 = start_script_name + ospl_release_name1
                    release_script_names.insert(0, release_script_name1)
                    ospl_release_names.insert(0, ospl_release_name1)
                    osplo_homes.insert(0, osplo_home1)
                    ospli_homes.insert(0, ospli_home1)
                    ospl_inst_homes.insert(0, ospl_inst_home1)
                    host1.set_log_dir(the_script_current_dir)
                    test_scenario.set_result_file(host1.get_log_dir() + host1.get_file_sep() + test_scenario.get_name() + "_result.log")
                    #host 2
                    host2 = test_scenario.define_host(test_root = test_root2, ospl_home = "default", host_name = host_name2, staf_port = staf_port_2)
                    file_path_separator2 = host2.get_file_sep()
                    release_script_name2 = start_script_name + ospl_release_name2
                    release_script_names.insert(1, release_script_name2)
                    ospl_release_names.insert(1, ospl_release_name2)
                    osplo_homes.insert(1, osplo_home2)
                    ospli_homes.insert(1, ospli_home2)
                    ospl_inst_homes.insert(1, ospl_inst_home2)
                    #host 3
                    host3 = test_scenario.define_host(test_root = test_root3, ospl_home = "default", host_name = host_name3, staf_port = staf_port_3)
                    file_path_separator3 = host3.get_file_sep()
                    release_script_name3 = start_script_name + ospl_release_name3
                    release_script_names.insert(2, release_script_name3)
                    ospl_release_names.insert(2, ospl_release_name3)
                    osplo_homes.insert(2, osplo_home3)
                    ospli_homes.insert(2, ospli_home3)
                    ospl_inst_homes.insert(2, ospl_inst_home3)
                    
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        if (ospl_start == "SRC"):
                            current_host.set_ospl_home(ospli_homes[count_of_host])
                            current_host.set_release_script_name(release_script_names[count_of_host])
                            current_host.set_release_script_ext(ext_script_name)
                        elif (ospl_start == "HDE"):
                            current_host.set_ospl_home(ospl_inst_homes[count_of_host])
                        count_of_host +=1 
                </script>

                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <call function="'InitHost'">host</call>
                </iterate>
        
                <script>
                    test_scenario.set_test_scenario_initialized(1)
                </script>
            </sequence>
            <!-- Catch all possible exceptions -->
            <catch exception="'...'" typevar="type" var="info">
                <sequence>
                    <script>
                        test_scenario.fail()
                        test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                    </script>
                </sequence>
            </catch>
        </try>
        
        <if expr="test_scenario.is_test_scenario_initialized() == 1">
            <sequence>
                <script>
                    ospl_uri_name = "OSPL_URI"
                    ospl_uri_off_los_name ="rupc_off_lossy.xml"
                    ospl_uri_off_pub_name ="rupc_off_publisher.xml"
                    ospl_uri_off_sub_name ="rupc_off_subscriber.xml"
                    ospl_uri_on_los_name ="rupc_on_lossy.xml"
                    ospl_uri_on_pub_name ="rupc_on_publisher.xml"
                    ospl_uri_on_sub_name ="rupc_on_subscriber.xml"
                    dds1659_sub_name ="dds1659_sub"
                    dds1659_pub_name ="dds1659_pub"
                    c_key = "c"
        
                    path_separators = []
                    file_separators = []
                    test_homes = []
        
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        path_separators.insert(count_of_host, current_host.get_path_sep())
                        file_separators.insert(count_of_host, current_host.get_file_sep())
                        test_home = osplo_homes[count_of_host] + file_separators[count_of_host] + testsuite_name + file_separators[count_of_host] + rbt_name + file_separators[count_of_host] + services_name + file_separators[count_of_host] + networking_name + file_separators[count_of_host] + test_dir_name
                        test_homes.insert(count_of_host, test_home)
                        current_host.set_ospl_log_dir(current_host.get_ospl_home())
                        current_host.set_env_value("LD_LIBRARY_PATH", current_host.get_env_value("LD_LIBRARY_PATH") + current_host.get_path_sep() + osplo_homes[count_of_host] + current_host.get_file_sep() + testsuite_name + current_host.get_file_sep() + "lib" + current_host.get_file_sep() + ospl_release_names[count_of_host])
                        if (ospl_start == "SRC"):
                            current_host.set_ospl_bin(ospli_homes[count_of_host] + file_separators[count_of_host] + "exec" + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host])
                        count_of_host +=1
        
                    #init of  array of results of tests
                    array_of_test_results = STAXGlobal([])
                    current_log_dir_names = STAXGlobal([])
                    
                    #define master writer process
                    count_of_host = 0
                   
                    for current_host in test_scenario.get_all_hosts():
                        current_process = current_host.define_process("no_command")
                        current_process.set_working_dir(test_homes[count_of_host])
                        if (count_of_host == 0):
                            publisher_proccess = current_process
                            publisher_proccess.set_command(test_homes[count_of_host] + file_separators[count_of_host] + exec_name + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + dds1659_pub_name)
                            publisher_log_name = "%s_%s" % (current_host.get_host_name(), "publisher")
                            kill_net_process = current_host.define_process("no_command")
                            kill_net_process.set_working_dir(test_homes[count_of_host])
                            kill_net_process.set_command("killall")
                            kill_net_process.set_args("-11 " + "networking")
                        elif (count_of_host == 1):
                            subscriber_proccess = current_process
                            current_process.set_command(test_homes[count_of_host] + file_separators[count_of_host] + exec_name + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + dds1659_sub_name)
                            subscriber_log_name = "%s_%s" % (current_host.get_host_name(), "subscriber")
                        else:
                            lossy_proccess = current_process
                            lossy_proccess.set_command(test_homes[count_of_host] + file_separators[count_of_host] + exec_name + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + dds1659_sub_name)
                            lossy_log_name = "%s_%s" % (current_host.get_host_name(), "lossy")
                        count_of_host +=1
                    
                </script>

                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <sequence>
                        <call function="'CreateTestLogDirectory'">[host, test_name]</call>
                        <script>
                            current_log_dir_name = STAXResult
                            current_log_dir_names.append(current_log_dir_name)
                            time.sleep(1)
                        </script>
                    </sequence>
                </iterate>

                <script>
                    log_file_full_paths = STAXGlobal([])
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        
                        log_file_full_path = current_host.get_test_root() + file_separators[count_of_host] + test_name + file_separators[count_of_host]  + current_log_dir_names[count_of_host]
                        
                        log_file_full_paths.insert(count_of_host, log_file_full_path)
                        #first host - master
        
                        if (count_of_host == 0):
                            current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_off_pub_name)
                            current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_off_pub_name)
                            publisher_proccess.set_log_file(log_file_full_path + file_separators[count_of_host] + publisher_log_name)
                            log_result = LogResult("publisher", log_file_full_paths[0] + file_separators[0] + publisher_log_name + "_off.log", log_file_full_path, "c","off")
                            
                        elif (count_of_host == 1):
                            current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_off_sub_name)
                            current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_off_sub_name)
                            subscriber_proccess.set_log_file(log_file_full_path + file_separators[count_of_host] + subscriber_log_name)
                            log_result = LogResult("subscriber", log_file_full_paths[0] + file_separators[0] + subscriber_log_name + "_off.log", log_file_full_path, "c","off")
                            
                        else:
                            current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_off_los_name)
                            current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_off_los_name)
                            lossy_proccess.set_log_file(log_file_full_path + file_separators[count_of_host] + lossy_log_name)
                            log_result = LogResult("lossy", log_file_full_paths[0] + file_separators[0] + lossy_log_name + "_off.log", log_file_full_path, "c","off")
                            
        
                        array_of_test_results.append(log_result)
                        count_of_host +=1              
                </script>
                <testcase name = "test_scenario.get_name()">
                    <sequence>
                        <script>
                            master_host_log_path = test_scenario.get_all_hosts()[0].get_test_root() + file_separators[0] + test_name + file_separators[0]  + current_log_dir_names[0]
                            starttime = time.time() # record starting test time
                        </script>
        
                        <loop var="index" from="1" to="test_scenario.get_quantity_of_steps()">
                            <sequence>
                                <!-- -->
                                <script>
                                    if (index == 1):
                                        publisher_proccess.set_log_file(publisher_proccess.get_log_file() + "_off.log")
                                        subscriber_proccess.set_log_file(subscriber_proccess.get_log_file() + "_off.log")
                                        lossy_proccess.set_log_file(lossy_proccess.get_log_file() + "_off.log")
                                    else:
                                        count_of_host = 0
                                        for current_host in test_scenario.get_all_hosts():
                            
                                            if (count_of_host == 0):
                                                current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_on_pub_name)
                                                current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_on_pub_name)
                                                publisher_proccess.set_log_file( log_file_full_paths[count_of_host] + file_separators[count_of_host] + publisher_log_name + "_on.log")
                                                print publisher_proccess.get_log_file()
                                                log_result = LogResult("publisher", log_file_full_paths[0]  + file_separators[0] + publisher_log_name+ "_on.log", log_file_full_paths[count_of_host] , "c","on")
                                                
                                            elif (count_of_host == 1):
                                                current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_on_sub_name)
                                                current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_on_sub_name)
                                                subscriber_proccess.set_log_file(log_file_full_paths[count_of_host]  + file_separators[count_of_host] + subscriber_log_name + "_on.log")
                                                print subscriber_proccess.get_log_file()
                                                log_result = LogResult("subscriber", log_file_full_paths[0]  + file_separators[0] + subscriber_log_name + "_on.log", log_file_full_paths[count_of_host] , "c","on")
                                                
                                            else:
                                                current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_on_los_name)
                                                current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_on_los_name)
                                                lossy_proccess.set_log_file(log_file_full_paths[count_of_host]  + file_separators[count_of_host] + lossy_log_name + "_on.log")
                                                print lossy_proccess.get_log_file()
                                                log_result = LogResult("lossy", log_file_full_paths[0]  + file_separators[0] + lossy_log_name + "_on.log", log_file_full_paths[count_of_host] , "c","on")
                                            array_of_test_results.append(log_result)
                                            count_of_host +=1
                                </script>
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'StartOSPL'">host</call>
                                </iterate>
                                <parallel>
                                    <sequence>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[1], subscriber_proccess, '25s']</call>
                                    </sequence>
                                    <sequence>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[2], lossy_proccess, '25s']</call>
                                    </sequence>
                                    <sequence>
                                        <script>
                                            time.sleep(3)
                                        </script>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[0], publisher_proccess, '25s']</call>
                                    </sequence>
                                    <sequence>
                                        <script>
                                            time.sleep(18)
                                        </script>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[0], kill_net_process]</call>
                                    </sequence>
                                </parallel>
                               
                                <script>
                                    time.sleep(10)
                                </script>
                                <call function="'CopyProcessLogToHost'">
                                    [test_scenario.get_all_hosts()[1], test_scenario.get_all_hosts()[0], subscriber_proccess, master_host_log_path]
                                </call>
                                <call function="'CopyProcessLogToHost'">
                                    [test_scenario.get_all_hosts()[2], test_scenario.get_all_hosts()[0], lossy_proccess, master_host_log_path]
                                </call>
                                
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'MoveSysLogToHost'">
                                        [host, test_scenario.get_all_hosts()[0], master_host_log_path]
                                    </call>
                                </iterate>
        
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'StopOSPL'">host</call>
                                </iterate>                     
                            </sequence>
                        </loop>
               
                        <script>
                            stoptime = time.time()
                            common_elapsedSecs = stoptime - starttime
                        </script>
        
                        <message>'Test complete ran for %d seconds' % common_elapsedSecs</message>
                        
                        <call function="'AnalyzeTestLog'">[master_host_log_path, array_of_test_results]</call>
                        
                    </sequence>
                </testcase>
        
            </sequence>
        <else>
            <script>
                test_scenario.analyze()
            </script>
        </else>
        </if>
    </sequence>
  </function>
</stax>
