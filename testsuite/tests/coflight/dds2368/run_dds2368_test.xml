<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">

<!--
    run_dds2368_test.xml - Run the dds 2368 test using STAX
-->

<stax>

  <defaultcall function="dds2368_main">
  </defaultcall>

  <function name="dds2368_main" scope="local" >
    <function-prolog>
      Test runs OSPL on three Linux nodes.
    </function-prolog>

    <function-list-args>
      <function-required-arg name="host_name1">
        The host name of the node 1 you wish test on in double or single quotes, use the following format: "name"
      </function-required-arg>
      <function-optional-arg name="ospl_start" default="'HDE'">
        Location of stax root on master machine in double or single quotes and backslash, use the following format: "dir1/dir2" with following file separator
      </function-optional-arg>
      <function-optional-arg name="test_root1" default="'/home/dds/FrameworkTests/log'">
        Location of test case build on node 1 in double or single quotes and backslash, use the following format: "dir1/dir2"
      </function-optional-arg>
      <function-optional-arg name="osplo_home1" default="'/home/dds/FrameworkTests/osplo'">
        Location of OSPLO root on node 1 in double or single quotes and backslash, use the following format: "dir1/dir2"
      </function-optional-arg>
      <function-optional-arg name="ospli_home1" default="'/home/dds/FrameworkTests/ospli'">
        Location of OSPLI root on node 1 in double or single quotes and backslash, use the following format: "dir1/dir2"
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name1" default="'x86.linux-release'">
        ospl target e.g. x86_64.linux-release on node 1
      </function-optional-arg>
      <function-optional-arg name="ospl_inst_home1" default="'/home/dds/PrismTech/OpenSpliceDDS/V6.4.0/HDE/x86.linux'">
        Location of OSPL root on node 1 in double or single quotes and backslash, use the following format: "dir1/dir2"
      </function-optional-arg>
      
      <function-optional-arg name="host_name2" default="'rhel60a'">
        The host name of the node 2 you wish to test on in double or single quotes, use the following format: "name"
      </function-optional-arg>
      <function-optional-arg name="test_root2" default="'/home/dds/FrameworkTests/log'">
        Location of test case build on node 2 in double or single quotes and  backslash, use the following format: "dir1/dir2"
      </function-optional-arg>
      <function-optional-arg name="osplo_home2" default="'/home/dds/FrameworkTests/osplo'">
        Location of osplo root on node 2
      </function-optional-arg>
      <function-optional-arg name="ospli_home2" default="'/home/dds/FrameworkTests/ospli'">
        Location of ospli root on node 2 
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name2" default="'x86.linux-release'">
        ospl target e.g. x86_64.linux-release on node 2
      </function-optional-arg>
      <function-optional-arg name="ospl_inst_home2" default="'/home/dds/PrismTech/OpenSpliceDDS/V6.4.0/HDE/x86.linux'">
        Location of OpenSplice installation on node 2
      </function-optional-arg>
      
      <function-optional-arg name="host_name3" default="'rhel62a'">
        The host name of the node 3
      </function-optional-arg>
      <function-optional-arg name="test_root3" default="'/home/dds/FrameworkTests/log'">
        Location of log directory on node 3 - where output logs will go
      </function-optional-arg>
      <function-optional-arg name="osplo_home3" default="'/home/dds/FrameworkTests/osplo'">
        Location of osplo root on node 3
      </function-optional-arg>
      <function-optional-arg name="ospli_home3" default="'/home/dds/FrameworkTests/ospli'">
        Location of ospli root on node 3
      </function-optional-arg>
      <function-optional-arg name="ospl_release_name3" default="'x86_64.linux-release'">
        ospl target e.g. x86_64.linux-release on node 3
      </function-optional-arg>
      <function-optional-arg name="ospl_inst_home3" default="'/home/dds/PrismTech/OpenSpliceDDS/V6.4.0/HDE/x86.linux'">
        Location of OpenSplice installation on node 3
      </function-optional-arg>

      
      
      <function-optional-arg name="staf_port_1" default="'6500'">
        Staf port on the node 1 in double or single quotes
      </function-optional-arg>
      <function-optional-arg name="staf_port_2" default="'6500'">
        Staf port on the node 2 in double or single quotes
      </function-optional-arg>
      <function-optional-arg name="staf_port_3" default="'6500'">
        Staf port on the node 3 in double or single quotes
      </function-optional-arg>
    </function-list-args>
    
    <sequence>      
        <import file="'../../stax/test_ospl.xml'"/>
        <import file="'dds2368_test_functions.xml'"/>

        <try>
            <sequence>
                <call function="'Initialise'" />        
                <script>
                    import time
                    # Add the "./common/python" directory into the Python module path:
                    the_script_current_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(local_file_sep)]
                    sys.path.append(the_script_current_dir + local_file_sep + "common" +local_file_sep + "python")
                    # Import the test classes definitions:
                    from ext_process                  import *
                    from log_result                   import *
                    from coflight_test_scenario       import *

                    test_name = "DDS2368"
                    ospli_name  = "ospli"
                    osplo_name  = "osplo"
                    start_script_name  =  "envs-"
                    ext_script_name  =  "sh"
                    testsuite_name = "testsuite"
                    rbt_name = "rbt"
                    services_name = "services"
                    exec_name = "exec"
                    networking_name = "networking"
                    test_dir_name = "dds2368"

                    test_scenario = CoFlightTestScenario(test_name, "CO-Flight requirements test DDS2368", q_steps = 3)
                    
                    release_script_names = []
                    ospl_release_names = []
                    osplo_homes = []
                    ospli_homes = []
                    ospl_inst_homes = []
                    #host 1
                    host1 = test_scenario.define_host(test_root = test_root1, ospl_home = "default", host_name = host_name1, staf_port = staf_port_1)
                    file_path_separator1 = host1.get_file_sep()
                    release_script_name1 = start_script_name + ospl_release_name1
                    release_script_names.insert(0, release_script_name1)
                    ospl_release_names.insert(0, ospl_release_name1)
                    osplo_homes.insert(0, osplo_home1)
                    ospli_homes.insert(0, ospli_home1)
                    ospl_inst_homes.insert(0, ospl_inst_home1)
                    host1.set_log_dir(the_script_current_dir)
                    test_scenario.set_result_file(host1.get_log_dir() + host1.get_file_sep() + test_scenario.get_name() + "_result.log")
                    #host 2
                    host2 = test_scenario.define_host(test_root = test_root2, ospl_home = "default", host_name = host_name2, staf_port = staf_port_2)
                    file_path_separator2 = host2.get_file_sep()
                    release_script_name2 = start_script_name + ospl_release_name2
                    release_script_names.insert(1, release_script_name2)
                    ospl_release_names.insert(1, ospl_release_name2)
                    osplo_homes.insert(1, osplo_home2)
                    ospli_homes.insert(1, ospli_home2)
                    ospl_inst_homes.insert(1, ospl_inst_home2)
                    #host 3
                    host3 = test_scenario.define_host(test_root = test_root3, ospl_home = "default", host_name = host_name3, staf_port = staf_port_3)
                    file_path_separator3 = host3.get_file_sep()
                    release_script_name3 = start_script_name + ospl_release_name3
                    release_script_names.insert(2, release_script_name3)
                    ospl_release_names.insert(2, ospl_release_name3)
                    osplo_homes.insert(2, osplo_home3)
                    ospli_homes.insert(2, ospli_home3)
                    ospl_inst_homes.insert(2, ospl_inst_home3)
                    
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        if (ospl_start == "SRC"):
                            current_host.set_ospl_home(ospli_homes[count_of_host])
                            current_host.set_release_script_name(release_script_names[count_of_host])
                            current_host.set_release_script_ext(ext_script_name)
                        elif (ospl_start == "HDE"):
                            current_host.set_ospl_home(ospl_inst_homes[count_of_host])
                        count_of_host +=1
                </script>

                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <call function="'InitHost'">host</call>
                </iterate>
                <script>
                    test_scenario.set_test_scenario_initialized(1)
                </script>
            </sequence>
            <!-- Catch all possible exceptions -->
            <catch exception="'...'" typevar="type" var="info">
                <sequence>
                    <script>
                        test_scenario.fail()
                        test_scenario.errors.append("Initializing process error: %s (%s)!"% (type, info))
                    </script>
                </sequence>
            </catch>
        </try>
        <if expr="test_scenario.is_test_scenario_initialized() == 1">
            <sequence>
                <script>
                    ospl_uri_name = "OSPL_URI"
                    ospl_uri_node_A_name ="nodeA.xml"
                    ospl_uri_node_B_name ="nodeB.xml"
                    ospl_uri_node_C_name ="nodeC.xml"


                    dds2368_sub_name ="dds2368_sub"
                    dds2368_pub_name ="dds2368_pub"
                    
                    c_key = "c"

                    path_separators = []
                    file_separators = []
                    test_homes = []

                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        path_separators.insert(count_of_host, current_host.get_path_sep())
                        file_separators.insert(count_of_host, current_host.get_file_sep())
                        test_home = osplo_homes[count_of_host] + file_separators[count_of_host] + testsuite_name + file_separators[count_of_host] + rbt_name + file_separators[count_of_host] + services_name + file_separators[count_of_host] + networking_name + file_separators[count_of_host] + test_dir_name
                        test_homes.insert(count_of_host, test_home)
                        current_host.set_ospl_log_dir(current_host.get_ospl_home())
                        current_host.set_env_value("LD_LIBRARY_PATH", current_host.get_env_value("LD_LIBRARY_PATH") + current_host.get_path_sep() + osplo_homes[count_of_host] + current_host.get_file_sep() + testsuite_name + current_host.get_file_sep() + "lib" + current_host.get_file_sep() + ospl_release_names[count_of_host])
                        if (ospl_start == "SRC"):
                            current_host.set_ospl_bin(ospli_homes[count_of_host] + file_separators[count_of_host] + "exec" + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host])
                        count_of_host +=1

                    #init of  array of results of tests
                    array_of_test_results = STAXGlobal([])
                    array_of_iptables_logs_paths = STAXGlobal([])
                    current_log_dir_names = STAXGlobal([])
                    publisher_params = STAXGlobal(["a","b","c"])

                    subscriber_processes = []
                    #define master writer process
                    count_of_host = 0
                   
                    for current_host in test_scenario.get_all_hosts():
                        current_process = current_host.define_process("no_command")
                        current_process.set_working_dir(test_homes[count_of_host])
                        if (count_of_host == 0):
                            publisher_a_process = current_process
                            publisher_a_process.set_command(test_homes[count_of_host] + file_separators[count_of_host] + exec_name + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + dds2368_pub_name)
                            publisher_a_log_name = "%s_%s" % (current_host.get_host_name(), "node_A_publisher")
                            iptables_process = current_host.define_process("no_command")
                            iptables_process.set_working_dir(test_homes[count_of_host])
                            iptables_process.set_command("iptables")
                            iptables_log_name = "%s_%s" % (current_host.get_host_name(), "node_A_iptables")
                            iptables_clean_process = current_host.define_process("no_command")
                            iptables_clean_process.set_working_dir(test_homes[count_of_host])
                            iptables_clean_process.set_command("iptables")
                            
                        elif (count_of_host == 1):
                            subscriber_b_process = current_process
                            subscriber_b_process.set_command(test_homes[count_of_host] + file_separators[count_of_host] + exec_name + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + dds2368_sub_name)
                            subscriber_b_log_name = "%s_%s" % (current_host.get_host_name(), "node_B_subscriber")
                        else:
                            subscriber_c_process = current_process
                            subscriber_c_process.set_command(test_homes[count_of_host] + file_separators[count_of_host] + exec_name + file_separators[count_of_host] + ospl_release_names[count_of_host] + file_separators[count_of_host] + dds2368_sub_name)
                            subscriber_c_log_name = "%s_%s" % (current_host.get_host_name(), "node_C_subscriber")
                        count_of_host +=1
                    
                </script>

                <iterate var="host" in="test_scenario.get_all_hosts()">
                    <sequence>
                        <call function="'CreateTestLogDirectory'">[host, test_name]</call>
                        <script>
                            current_log_dir_name = STAXResult
                            current_log_dir_names.append(current_log_dir_name)
                            time.sleep(1)
                        </script>
                    </sequence>
                </iterate>

                
                <script>      
                    import java.util.UUID
                    log_file_full_paths = STAXGlobal([])
                    uuids_array = STAXGlobal([])
                    count_of_host = 0
                    for current_host in test_scenario.get_all_hosts():
                        
                        log_file_full_path = current_host.get_test_root() + file_separators[count_of_host] + test_name + file_separators[count_of_host]  + current_log_dir_names[count_of_host]
                        
                        log_file_full_paths.insert(count_of_host, log_file_full_path)
                        #first host - master

                        if (count_of_host == 0):
                            current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_node_A_name)
                            current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_node_A_name)
                            publisher_a_process.set_log_file(log_file_full_path + file_separators[count_of_host] + publisher_a_log_name)  
                            iptables_process.set_log_file(log_file_full_path + file_separators[count_of_host] + iptables_log_name)
                        elif (count_of_host == 1):
                            current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_node_B_name)
                            current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_node_B_name)
                            subscriber_b_process.set_log_file(log_file_full_path + file_separators[count_of_host] + subscriber_b_log_name)                   
                        else:
                            current_host.set_env_value(ospl_uri_name, "file://" + test_home + file_separators[count_of_host] + ospl_uri_node_C_name)
                            current_host.set_ospl_uri("file://" + test_home + file_separators[count_of_host] + ospl_uri_node_C_name)
                            subscriber_c_process.set_log_file(log_file_full_path + file_separators[count_of_host] + subscriber_c_log_name)
                        count_of_host +=1
                    #getting 3 uuid for identification of 3 steps log rows
                    for i in range(test_scenario.get_quantity_of_steps()):
                        uuid = java.util.UUID.randomUUID().toString()
                        uuids_array.append(uuid[0:28]) #only 29 symbols , this is -log-prefix limitation
                </script>
                <testcase name = "test_scenario.get_name()">
                    <sequence>
                        <script>        
                            master_host_log_path = test_scenario.get_all_hosts()[0].get_test_root() + file_separators[0] + test_name + file_separators[0]  + current_log_dir_names[0]

                            starttime = time.time() # record starting test time
                        </script>

                        <loop var="index" from="1" to="test_scenario.get_quantity_of_steps()">
                            <sequence>
                                <!-- -->
                                <script>
                                    count_of_host = 0
                                    for current_host in test_scenario.get_all_hosts():
                                        if (count_of_host == 0):
                                            publisher_a_process.set_log_file(log_file_full_paths[count_of_host] + file_separators[count_of_host] + publisher_a_log_name + "_" + publisher_params[index - 1] +".log")
                                            log_result = LogResult("node_A_publisher", log_file_full_paths[0] + file_separators[0] + publisher_a_log_name + "_" + publisher_params[index - 1] +".log", log_file_full_paths[0], "c", publisher_params[index - 1])
                                            publisher_a_process.set_args(publisher_params[index - 1])
                                            array_of_test_results.append(log_result)
                                            iptables_process.set_args("-A OUTPUT -j LOG --log-prefix \""+ uuids_array[index - 1] + " \" -d 230.230.230.0/24")
                                            iptables_clean_process.set_args("-F")
                                            iptables_process.set_log_file(log_file_full_paths[count_of_host] + file_separators[count_of_host] + iptables_log_name + "_" + publisher_params[index - 1] +".log")
                                            array_of_iptables_logs_paths.append(iptables_process.get_log_file())
                                            log_result = LogResult("node_A_iptables", log_file_full_paths[0] + file_separators[0] + iptables_log_name + "_" + publisher_params[index - 1] +".log", log_file_full_paths[0], "c", publisher_params[index - 1])
                                        elif (count_of_host == 1):
                                            subscriber_b_process.set_log_file(log_file_full_paths[count_of_host] + file_separators[count_of_host] + subscriber_b_log_name + "_" + publisher_params[index - 1] +".log")
                                            log_result = LogResult("node_B_subscriber", log_file_full_paths[0] + file_separators[0] + subscriber_b_log_name + "_" + publisher_params[index - 1] +".log", log_file_full_paths[0], "c", publisher_params[index - 1])
                                            
                                        else:
                                            subscriber_c_process.set_log_file(log_file_full_paths[count_of_host] + file_separators[count_of_host] + subscriber_c_log_name + "_" + publisher_params[index - 1] +".log")
                                            log_result = LogResult("node_C_subscriber", log_file_full_paths[0] + file_separators[0] + subscriber_c_log_name + "_" + publisher_params[index - 1] +".log", log_file_full_paths[0], "c", publisher_params[index - 1])
                                        array_of_test_results.append(log_result)
                                        count_of_host +=1 
                                     
                                </script>
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'StartOSPL'">host</call>
                                </iterate>
                                <sequence>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[0], iptables_clean_process, '3s']</call>
                                </sequence>
                                <parallel>
                                    <sequence>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[1], subscriber_b_process, '10s']</call>
                                    </sequence>
                                    <sequence>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[2], subscriber_c_process, '10s']</call>
                                    </sequence>
                                    
                                    <sequence>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[0], iptables_process, '10s']</call>
                                    </sequence>
                                    
                                    <sequence>
                                        <script>
                                            time.sleep(3)
                                        </script>
                                        <call function="'RunProcess'">[test_scenario.get_all_hosts()[0], publisher_a_process, '7s']</call>
                                    </sequence>
                                </parallel>
                                <script>
                                    time.sleep(3)
                                </script>
                                <call function="'CopyProcessLogToHost'">
                                    [test_scenario.get_all_hosts()[1], test_scenario.get_all_hosts()[0], subscriber_b_process, master_host_log_path]
                                </call>  
                                <call function="'CopyProcessLogToHost'">
                                    [test_scenario.get_all_hosts()[2], test_scenario.get_all_hosts()[0], subscriber_c_process, master_host_log_path]
                                </call>

                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'MoveSysLogToHost'">
                                            [host, test_scenario.get_all_hosts()[0], master_host_log_path]
                                    </call>
                                </iterate>
         
                                <iterate var="host" in="test_scenario.get_all_hosts()">
                                    <call function="'StopOSPL'">host</call>
                                </iterate>                     
                            </sequence>
                        </loop>
               
                        <script>
                            stoptime = time.time()
                            common_elapsedSecs = stoptime - starttime
                        </script>

                        <message>'Test complete ran for %d seconds' % common_elapsedSecs</message>
                        <call function="'CopyIptablesInfoIntoLog'">[array_of_iptables_logs_paths, uuids_array]</call>
                        <call function="'AnalyzeTestLog'">[master_host_log_path, array_of_test_results]</call>
                        
                    </sequence>
                </testcase>
            </sequence>
        <else>
            <script>
                test_scenario.analyze()
            </script>
        </else>
        </if>
    </sequence>
  </function>
</stax>
