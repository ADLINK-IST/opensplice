<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<!-- 
## @defgroup dds1583_scenario2 DDS1583 - Durability merge policy scenario 2: Merging between three nodes in the same role
#
# \b Test \b ID: dds1583_scenario2
# 
# \b Test \b Objectives: \n
# Verify a consistent state of nodes and data throughout the DDS network after a temporary network failure.
# This test is similar to \ref dds1583_scenario1, except three nodes are active instead of two.
# During the network interruption, samples are published on all three nodes. The test succeeds if, after the network is restored,
# all samples are available on each of the three nodes.
#
# \b Prerequisites, \b assumptions, \b constraints
#
# \par \e Environment:
# Three hosts are used for this test. To simulate network failure between the nodes, each node is running a firewall that can be manipulated    
# to allow, or disallow, incoming OpenSplice traffic from a different host. Three UDP ports are used by the nodes in this test: C1 (best-effort channel),    
# C2 (reliable channel) and C3 (discovery). All three are to be closed, on both ends, to completely isolate a node from another node, while not affecting traffic
# Note: OpenSplice automatically selects an additional port for acknowledgement of traffic on the reliable channel.
#
# \par \e Invariant:
# All three participating hosts are running the OpenSplice daemon with networking and durability services enabled on the default domain.   
# The topic 'TestTopic' (T1) is used for this test, created with default QoS settings with the following exceptions: durability is set to transient,    
# reliability is set to reliable. Three sets of samples are used: S1, S2 and S3. All nodes are in the default role and are configured to merge data in the
# default namespace with other nodes in the default role.
# Other variations of this testcases exist (\ref dds1583_scenario3, \ref dds1583_scenario4) in which nodes are placed in different roles. 
# Networking is configured to allow reconnections. To be able to validate preferred aligner selection, durability tracing is enabled with verbosity-level set to FINEST.   
#    
# \par \e Node \e 1:    
# Subscribed to T1, publisher of T1 samples set S1, on the default (built-in) partition.    
# \par \e Node \e 2:      
# Subscribed to T1, publisher of T1 samples set S2, on the default (built-in) partition.
# \par \e Node \e 3:
# Subscribed to T1, publisher of T1 samples set S3, on the default (built-in) partition.
#
# \b Test \b Procedure
#
# \b Step \b 1
# \par \e Action
# Start the OpenSplice daemon, networking and durability services on all nodes and confirm a correct master selection
# \par \e Result
# Spliced, networking and durability started succesfully. All nodes are in the default role so agree on a single master node.
#
# \b Step \b 2
# \par \e Action
# Isolate Node1 from Node2 and Node3. To do so modify the firewall to drop traffic on C1, C2, C3:
# - On Node1, for the IP addresses of Node2 and Node3
# - On Node2, for the IP address of Node1
# - On Node3, for the IP address of Node1  
# \par \e Result
# Node1 is disconnected from Node2 and Node3. The ospl-info.log on Node1 confirms missed hearbeats from both other nodes, 
# after which they are from the reliable networking protocol. On Node2 and Node3 this also happens for Node1.
# Node2 and Node3 remain connected with each other.
#
# \b Step \b 3
# \par \e Action
# Create DataWriters on Node1, Node2 and Node3, write samples S1 on Node1, S2 on Node2, S3 on Node3.
# \par \e Result
# DataWriters on all three nodes complete the write operation without errors.
#
# \b Step \b 4
# \par \e Action
# Restore communication of Node1 with Node2 and Node3.
# To do so modify the firewall to allow traffic on C1, C2 and C3 in reverse of Step2.
# \par \e Result
# Node1 is reconnected with Node2 and Node3. The durability logging confirms the hosts are rediscovered and merge policies are applied due to a master conflict between Node1 and either Node2 or Node3, 
# depending on which one was master during the time Node1 was isolated.
#
# \b Step \b 5
# \par \e Action
# Create DataReaders on Node1, Node2 and Node3, subscribing to T1 on the built-in partition. 
# Wait 3 seconds for historical data and then take all samples.
# \par \e Result
# All nodes have access to a complete set of samples (S1 + S2 + S3).
#
# \b Step \b 6
# \par \e Action
# Confirm all hosts agree on a single master for the default namespace
# \par \e Result
# Result Either Node1 is master of itself, Node2 and Node3, or Node2 is master of itself, Node1 and Node3, or Node3 is master of itself, Node1 and Node2
# 
# \b Step \b 7
# \par \e Action
# Stop OpenSplice and retrieve logfiles on both nodes
# \par \e Result
# OpenSplice and services are properly stopped on all nodes
#
# \b Notes \n
# CoFlight reference: eFDPfi_MW_DDS_7
-->
<stax>
    <function name="Run">
        <function-list-args>
            <function-optional-arg name="host1" default="None">
                STAF machine nickname (hostname) of host 1
            </function-optional-arg>
            <function-optional-arg name="host2" default="None">
                STAF machine nickname (hostname) of host 2
            </function-optional-arg>
            <function-optional-arg name="host3" default="None">
                STAF machine nickname (hostname) of host 3
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <import file="'../../common/HostManager.xml'"/>
            <import file="'../common/Publisher.xml'"/>
            <import file="'../common/Subscriber.xml'"/>
            <import file="'../../common/Firewall.xml'"/>
            <import file="'../../common/DurabilityService.xml'"/>
            <import file="'generic_merge_scenario.xml'"/>
            <call function="'Initialize'"/>
            
            <script> 
                hostList = [None, None, None]
                portList = [None, None, None]
                samples = [None, None, None]
                expected_samples = [None, None, None]
                
                if ((STAXJobName == None) or (len(STAXJobName) == 0)):
                    STAXJobName = 'Job%d_dds1583_scenario2' % STAXJobID        
        
                uri = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds1583-002.xml'
                
                # Each host will publish a different set of samples
                samples[0] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds1583-002_host0.txt'
                samples[1] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds1583-002_host1.txt'
                samples[2] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds1583-002_host2.txt'
                
                # Each host is expected to end up with an identical set of all samples
                expected_samples[0] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds1583-002_all.txt'
                expected_samples[1] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds1583-002_all.txt'
                expected_samples[2] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds1583-002_all.txt'
        
                STAXMessageLog = 1
            </script>
            
            <try> <!-- Catching Resource.* and Testcase.* exceptions -->
                <sequence>
                    <!-- Request/lock three linux machines by hostname or by requesting three random hosts -->
                    <block name="'RequestHosts'">
                        <if expr="(host1 != None) and (host2 != None) and (host3 != None)">
                            <sequence>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host1</call-map-arg>
                                </call-with-map>
                                <script>hostList[0] = STAXResult</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host2</call-map-arg>
                                </call-with-map>
                                <script>hostList[1] = STAXResult</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host3</call-map-arg>
                                </call-with-map>
                                <script>hostList[2] = STAXResult</script>
                            </sequence>
                            <else>
                                <loop from="0" to="len(hostList) - 1" var="i">
                                    <sequence>
                                        <call-with-map function="'RequestHost'">
                                            <call-map-arg name="'target'">'.*linux.*'</call-map-arg>
                                        </call-with-map>
                                        <script>hostList[i] = STAXResult</script>
                                    </sequence>
                                </loop>
                            </else>
                        </if>
                    </block>
                    
                    <!-- Request/lock three UDP ports during the testcase -->
                    <block name="'RequestPorts'">
                        <loop from="0" to="len(portList) - 1" var="i">
                            <sequence>
                                <call function="'RequestPortResource'"/>
                                <script>
                                    [RC, port] = STAXResult
                                    portList[i] = port
                                </script>
                            </sequence>
                        </loop>
                    </block>
                    
                    <!-- Deploy OpenSplice on the machines and set some common properties -->
                    <block name="'DeployHosts'">
                        <sequence>
                            <paralleliterate in="hostList" var="host">
                                <sequence>
                                    <call-with-map function="'DeployHost'">
                                        <call-map-arg name="'host'">host</call-map-arg>
                                    </call-with-map>
                                    <script>
                                        # Set some common parameters
                                        host.set_scenario('tc_dds1583_mergepolicies_002')
                                        host.set_env('OSPL_BESTEFFORT_PORT', portList[0])
                                        host.set_env('OSPL_RELIABLE_PORT', portList[1])
                                        host.set_env('OSPL_DISCOVERY_PORT', portList[2])
                                        host.set_env('OSPL_DOMAIN', host.get_scenario())
                                        host.set_env('OSPL_ERRORFILE', host.get_scenario() + '-ospl-error.log')
                                        host.set_env('OSPL_INFOFILE', host.get_scenario() + '-ospl-info.log')
                                        host.set_env('OSPL_DURABILITY_TRACE', host.get_scenario() + '-durability.log')
                                    </script>
                                </sequence>
                            </paralleliterate>
                            <script>
                                hostList[0].set_env('OSPL_ROLE', 'DefaultRole')
                                hostList[1].set_env('OSPL_ROLE', 'DefaultRole')
                                hostList[2].set_env('OSPL_ROLE', 'DefaultRole')
                            </script>
                        </sequence>
                    </block>
                    
                    <block name="'DeployFiles'">
                        <paralleliterate in="hostList" var="host">
                            <sequence>
                                <call function="'DeployPublisher'">host</call>
                                <call function="'DeploySubscriber'">host</call>
                                <call function="'DeployFwTool'">host</call>
                            </sequence>
                        </paralleliterate>
                    </block>
                    
                    <block name="'RunScenario'">
                        <testcase name="'tc_dds1583_mergepolicies_002'">
                            <sequence>
                                <call-with-map function="'GenericMergeScenario'">
                                    <call-map-arg name="'hosts'">hostList</call-map-arg>
                                    <call-map-arg name="'uri'">uri</call-map-arg>
                                    <call-map-arg name="'samples'">samples</call-map-arg>
                                    <call-map-arg name="'expected_samples'">expected_samples</call-map-arg>
                                </call-with-map>
                            </sequence>
                        </testcase>
                    </block>
                </sequence>
                                
                <catch exception="'Resource'" var="msg">
                    <log message="1">'An exception occurred related to a resource needed to run this test. The test cannot start.\nException: %s' % msg</log>
                </catch>
                <catch exception="'TestCase'" var="msg">
                    <sequence>
                        <log message="1">'An exception occured during a testcase. Succeeding tests are cancelled.\nException: %s' % msg</log>
                        <if expr="STAXCurrentTestcase != None">
                            <tcstatus result="'fail'">'Exception occurred'</tcstatus>
                        </if>
                    </sequence>
                </catch>
                
                <finally>
                    <!-- Release, cleanup resources -->
                    <sequence>
                        <paralleliterate in="hostList" var="host">
                            <if expr="host != None">
                                <call function="'CleanupHost'">host</call>
                            </if>
                        </paralleliterate>
                        <paralleliterate in="portList" var="port">
                            <if expr="port != None">
                                <call function="'ReleasePortResource'">port</call>
                            </if>
                        </paralleliterate>
                    </sequence>
                </finally>
            </try>
        </sequence>
    </function>
</stax>
