<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "../../stax/stax.dtd">
<!--
## @defgroup dds2340_scenario3 DDS2340 - Merging across multiple subnets (merge-policy scenario 3)
#
# This test runs a mergepolicy scenario on hosts in two different subnets.
# The only modifications are in the OpenSplice configuration files: hostnames are hardcoded and 
# communicate using point-to-point unicast instead of the default broadcast (which doesn't work across subnet boundaries).
# If this testcase needs to be run on different hosts, make sure a suitable configuration file is added to the 'etc' directory
# for the particular host.
#
# To get an understanding of the scenario, see the original test description: \ref dds1583_scenario3
#
-->
<stax>
    <function name="Run">
        <function-list-args>
            <function-optional-arg name="host1" default="None">
                STAF machine nickname (hostname) of host 1
            </function-optional-arg>
            <function-optional-arg name="host2" default="None">
                STAF machine nickname (hostname) of host 2
            </function-optional-arg>
            <function-optional-arg name="host3" default="None">
                STAF machine nickname (hostname) of host 3
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <import file="'../../common/HostManager.xml'"/>
            <import file="'../common/Publisher.xml'"/>
            <import file="'../common/Subscriber.xml'"/>
            <import file="'../../common/Firewall.xml'"/>
            <import file="'../../common/DurabilityService.xml'"/>
            <import file="'generic_merge_scenario.xml'"/>
            <call function="'Initialize'"/>
            
            <script> 
                hostList = [None, None, None]
                portList = [None, None, None]
                samples = [None, None, None]
                expected_samples = [None, None, None]
                uri = [None, None, None]
                
                if ((STAXJobName == None) or (len(STAXJobName) == 0)):
                    STAXJobName = 'Job%d_dds2340_scenario3' % STAXJobID
                
                # Each host will publish a different set of samples
                samples[0] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-003_host0.txt'
                samples[1] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-003_host1.txt'
                samples[2] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-003_host2.txt'
                
                # Each host is expected to end up with an identical set of all samples
                expected_samples[0] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-003_all.txt'
                expected_samples[1] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-003_all.txt'
                expected_samples[2] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'samples_dds2340-003_all.txt'
        
                STAXMessageLog = 1
            </script>
            
            <try> <!-- Catching Resource.* and Testcase.* exceptions -->
                <sequence>
                    <!-- Request/lock three linux machines by hostname or by requesting three random hosts -->
                    <block name="'RequestHosts'">
                        <if expr="(host1 != None) and (host2 != None) and (host3 != None)">
                            <sequence>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host1</call-map-arg>
                                </call-with-map>
                                <script>hostList[0] = STAXResult</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host2</call-map-arg>
                                </call-with-map>
                                <script>hostList[1] = STAXResult</script>
                                <call-with-map function="'RequestHost'">
                                    <call-map-arg name="'hostname'">host3</call-map-arg>
                                </call-with-map>
                                <script>hostList[2] = STAXResult</script>
                            </sequence>
                            <else>
                                <loop from="0" to="len(hostList) - 1" var="i">
                                    <sequence>
                                        <call-with-map function="'RequestHost'">
                                            <call-map-arg name="'target'">'.*linux.*'</call-map-arg>
                                        </call-with-map>
                                        <script>hostList[i] = STAXResult</script>
                                    </sequence>
                                </loop>
                            </else>
                        </if>
                    </block>
                    
                    <!-- Request/lock three UDP ports during the testcase -->
                    <block name="'RequestPorts'">
                        <loop from="0" to="len(portList) - 1" var="i">
                            <sequence>
                                <call function="'RequestPortResource'"/>
                                <script>
                                    [RC, port] = STAXResult
                                    portList[i] = port
                                </script>
                            </sequence>
                        </loop>
                    </block>
                    
                    <!-- Deploy OpenSplice on the machines and set some common properties -->
                    <block name="'DeployHosts'">
                        <sequence>
                            <paralleliterate in="hostList" var="host">
                                <sequence>
                                    <call-with-map function="'DeployHost'">
                                        <call-map-arg name="'host'">host</call-map-arg>
                                    </call-with-map>
                                    <script>
                                        # Set some common parameters
                                        host.set_scenario('tc_dds2340_subnets_003')
                                        host.set_env('OSPL_BESTEFFORT_PORT', portList[0])
                                        host.set_env('OSPL_RELIABLE_PORT', portList[1])
                                        host.set_env('OSPL_DISCOVERY_PORT', portList[2])
                                        host.set_env('OSPL_DOMAIN', host.get_scenario())
                                        host.set_env('OSPL_ERRORFILE', host.get_scenario() + '-ospl-error.log')
                                        host.set_env('OSPL_INFOFILE', host.get_scenario() + '-ospl-info.log')
                                        host.set_env('OSPL_DURABILITY_TRACE', host.get_scenario() + '-durability.log')
                                    </script>
                                </sequence>
                            </paralleliterate>
                            <script>
                                hostList[0].set_env('OSPL_ROLE', 'RoleA')
                                hostList[1].set_env('OSPL_ROLE', 'RoleB')
                                hostList[2].set_env('OSPL_ROLE', 'RoleB')
                                
                                uri[0] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds2340-003-' + hostList[0].get_hostname() + '.xml'
                                uri[1] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds2340-003-' + hostList[1].get_hostname() + '.xml'
                                uri[2] = os.path.dirname(STAXCurrentXMLFile) + file_sep + 'etc' + file_sep + 'config_dds2340-003-' + hostList[2].get_hostname() + '.xml'
                            </script>
                        </sequence>
                    </block>
                    
                    <block name="'DeployFiles'">
                        <paralleliterate in="hostList" var="host">
                            <sequence>
                                <call function="'DeployPublisher'">host</call>
                                <call function="'DeploySubscriber'">host</call>
                                <call function="'DeployFwTool'">host</call>
                            </sequence>
                        </paralleliterate>
                    </block>
                    
                    <block name="'RunScenario'">
                        <testcase name="'tc_dds2340_subnets_003'">
                            <sequence>
                                <call-with-map function="'GenericMergeScenario'">
                                    <call-map-arg name="'hosts'">hostList</call-map-arg>
                                    <call-map-arg name="'uri'">uri</call-map-arg>
                                    <call-map-arg name="'samples'">samples</call-map-arg>
                                    <call-map-arg name="'expected_samples'">expected_samples</call-map-arg>
                                </call-with-map>
                            </sequence>
                        </testcase>
                    </block>
                </sequence>
                                
                <catch exception="'Resource'" var="msg">
                    <log message="1">'An exception occurred related to a resource needed to run this test. The test cannot start.\nException: %s' % msg</log>
                </catch>
                <catch exception="'TestCase'" var="msg">
                    <sequence>
                        <log message="1">'An exception occured during a testcase. Succeeding tests are cancelled.\nException: %s' % msg</log>
                        <if expr="STAXCurrentTestcase != None">
                            <tcstatus result="'fail'">'Exception occurred'</tcstatus>
                        </if>
                    </sequence>
                </catch>
                
                <finally>
                    <!-- Release, cleanup resources -->
                    <sequence>
                        <paralleliterate in="hostList" var="host">
                            <if expr="host != None">
                                <call function="'CleanupHost'">host</call>
                            </if>
                        </paralleliterate>
                        <paralleliterate in="portList" var="port">
                            <if expr="port != None">
                                <call function="'ReleasePortResource'">port</call>
                            </if>
                        </paralleliterate>
                    </sequence>
                </finally>
            </try>
        </sequence>
    </function>
</stax>
