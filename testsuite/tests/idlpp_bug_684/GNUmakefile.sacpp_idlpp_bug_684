# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.sacpp_idlpp_bug_684
#
# $Id: prism.mpd,v 1.4 2009-05-15 09:09:51 vz Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.sacpp_idlpp_bug_684
DEPENDENCY_FILE  = .depend.sacpp_idlpp_bug_684
BIN_UNCHECKED    = sacpp_idlpp_bug_684

FILES = \
  TestTopicsDcps.cpp \
  TestTopics.cpp \
  TestTopicsSplDcps.cpp \
  TestTopicsDcps_impl.cpp \
  test.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
override no_hidden_visibility = 1

LDLIBS = -ldcpssacpp -ldcpsgapi -lddsuser -lddskernel -lddsserialization -lddsconfparser -lddsconf -lddsdatabase -lddsutil -lddsos

PRJ_TYPE = rtp

INSBIN ?= .
ifeq ($(INSBIN),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSBIN)


# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/sacpp_idlpp_bug_684
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
else
  all: lib_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(TAO_ROOT)/include/makeinclude/macros.GNU
include $(TAO_ROOT)/include/makeinclude/rules.common.GNU
include $(TAO_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(OUTPUT_DIRECTORY),)
ifneq ($(OUTPUT_DIRECTORY),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/%$(VAR)$(EXEEXT))
endif
endif

include $(TAO_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L$(OSPL_HOME)/lib
else
LDFLAGS      += -L. -L$(OSPL_HOME)/lib
endif
CPPFLAGS     += -I$(OSPL_HOME)/include/dcps/C++/SACPP -I$(OSPL_HOME)/include -I$(OSPL_HOME)/include/sys

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo sacpp_idlpp_bug_684 will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

GENERATED_DIRTY += TestTopicsDcps.h TestTopics.h TestTopicsSplDcps.h TestTopicsDcps_impl.h TestTopicsDcps.cpp TestTopics.cpp TestTopicsSplDcps.cpp TestTopicsDcps_impl.cpp ccpp_TestTopics.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) TestTopics.idl -nt TestTopicsDcps.h 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopics.h 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopicsSplDcps.h 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopicsDcps_impl.h 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopicsDcps.cpp 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopics.cpp 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopicsSplDcps.cpp 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt TestTopicsDcps_impl.cpp 2> /dev/null && $(TEST_EXE) TestTopics.idl -nt ccpp_TestTopics.h 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
TestTopicsDcps.h TestTopics.h TestTopicsSplDcps.h TestTopicsDcps_impl.h TestTopicsDcps.cpp TestTopics.cpp TestTopicsSplDcps.cpp TestTopicsDcps_impl.cpp ccpp_TestTopics.h: TestTopics.idl
	"$(OSPL_HOME)/bin/idlpp" -I "$(OSPL_HOME)/etc/idl" -S -l cpp TestTopics.idl

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),true)
$(BIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $^ $(VLDLIBS) $(POSTLINK)
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

