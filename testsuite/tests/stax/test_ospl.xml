<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">
<stax>

    <!--
    File:         test_ospl_stax.xml
    Description:  Some common useful functions for Vortex OpenSplice scenarios
    -->

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="Initialise" >
        <function-prolog>
            <![CDATA[
            This function must be called first in all functions or jobs.
            It initialises variables,
            Does various STAX and STAF jiggery pokery,
            and sets up the Python import path and imports the test classes module.
            ]]>
        </function-prolog>

        <function-epilog>
            <![CDATA[
            The scope of this funcion is global rather than local
            so variables created here are all effectively exported.
            To avoid conflicts with variables in jobs prefix all
            used in local working with init_* and try and keep them to a min
            to avoid debugger clutter.
            ]]>
        </function-epilog>

        <function-no-args/>

        <sequence>
            <script>
                # Only do this once:
                try:
                    init_required
                except NameError:
                    init_required = 1
            </script>
            <if expr="init_required == 1">
                <sequence>

                    <!-- This is a bit laborious.
                    We need to find STAFRoot to import function that
                    lets us read multiple variables at once.
                    To do this we have to read two variables... (goto start) -->

                    <!-- Get STAF root on this machine -->
                    <stafcmd>
                        <location>
                            STAXCurrentXMLMachine
                        </location>
                        <service>
                            "VAR"
                        </service>
                        <request>
                            "RESOLVE STRING {STAF/Config/STAFRoot}"
                        </request>
                    </stafcmd>
                    <script>local_staf_root = STAFResult</script>

                    <!-- Import STAX utility functions -->
                    <import file="'%s/services/stax/libraries/STAXUtil.xml'% local_staf_root"/>

                    <!-- Import some variables relating to machine this script is running from -->
                    <call function="'STAXUtilImportSTAFVars'">
                    [
                      {'STAF/Config/Sep/File': 'local_file_sep',
                       'STAF/Config/Sep/Path': 'local_path_sep'},
                       STAXCurrentXMLMachine
                    ]
                    </call>

                    <script>
                        # Add the "../stax/python" directory onto the Python module path:
                        the_script_current_dir = STAXCurrentXMLFile[:STAXCurrentXMLFile.rfind(local_file_sep)]

                        import sys
                        sys.path.append(the_script_current_dir + local_file_sep + "python")

                        # Import the test classes definitions:
                        from test_errors              import *
                        from process                  import *
                        from ospl                     import *
                        from host                     import *
                        from base_test_scenario       import *
                        from touchstone_test_scenario import *
                    </script>
                </sequence>
            </if>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="StartOSPL" scope="local">
        <function-prolog>
            <![CDATA[
            Starts OpenSplice on the defined host.
            Optionally with a specific domain config.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Returns a STAXResult of "0" on successful start
            or if the splice daemon was already running.
            ]]>
        </function-epilog>

        <function-single-arg>
            <function-required-arg name="host">
                Which host to start OSPL on.
            </function-required-arg>
        </function-single-arg>

        <sequence>
            <!-- Check if OSPL is already running on the host -->
            <call function="'OSPLIsRunning'">host</call>
            <if expr="STAXResult == 1">
                <sequence>
                    <log level="'info'">
                        "StartOSPL: OSPL is already running at [%s] with [%s]."%\
                        (host.get_host_name(), host.get_ospl_uri())
                    </log>
                    <return>0</return>
                </sequence>
            </if>

            <log level="'info'" message="1">
                "StartOSPL: [%s] start [%s] on [%s] in [%s]."%\
                (host.get_ospl_command(), host.get_ospl_uri(), host.get_host_name(), host.get_ospl_log_dir())
            </log>

            <!-- Launch 'ospl start' command on the host -->
            <process name="'%s %s on %s'% (host.get_ospl_command(), host.get_ospl_args_to_start(), host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <command>
                    host.get_ospl_command()
                </command>
                <parms>
                    host.get_ospl_args_to_start()
                </parms>
                <workdir>
                    host.get_ospl_log_dir()
                </workdir>
                <envs>
                    host.get_host_env()
                </envs>
                <stderr mode="'stdout'"/>
                <returnstdout/>
                <focus mode="'minimized'"/>
            </process>

            <!-- Check -->
            <if expr="RC != 0 or STAFResult != None">
                <sequence>
                    <script>
                        err_msg = "StartOSPL: [%s %s] failed on [%s] with result [%s] [%s]"%\
                                  (host.get_ospl_command(),
                                   host.get_ospl_args_to_start(),
                                   host.get_host_name(),
                                   RC,
                                   STAFResult)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "OSPLDidNotStart"]</call>
                </sequence>
            </if>
            
            <!-- Call 'ospl status' command to check if the daemon is running -->
            <sequence>
                <timer duration="'3s'">
                    <loop until="STAXResult == 1">
                        <sequence>
                            <call function="'OSPLIsRunning'">host</call>
                        </sequence>
                    </loop>
                </timer>
                <if expr="STAXResult == 0">
                    <sequence>
                        <script>
                            err_msg = "StartOSPL: ospl start %s - domain still not running 30s after start on [%s]."%\
                                      (host.get_ospl_uri(), host.get_host_name())
                        </script>
                        <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "OSPLDidNotStarted"]</call>
                    </sequence>
                </if>
            </sequence>

            <return>0</return>
        </sequence>
</function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="StopOSPL" scope="local">
        <function-prolog>
            <![CDATA[
            Stop OpenSplice on a host.
            Optionally with a specific domain config or stop the default instance otherwise.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Returns a STAXResult of "0" on successful stop
            or if the splice daemon had already stopped running.
            Throws and exception otherwise.
            ]]>
        </function-epilog>

        <function-single-arg>
            <function-required-arg name="host">
                Which host instance to stop OSPL on.
            </function-required-arg>
        </function-single-arg>

        <sequence>
            <!-- Check if OSPL is running on the host -->
            <call function="'OSPLIsRunning'">host</call>
            <if expr="STAXResult == 0">
                <sequence>
                    <log level="'info'" message="1">
                        "StopOSPL: OSPL is already stopped at [%s] with [%s]."%\
                        (host.get_host_name(), host.get_ospl_uri())
                    </log>
                    <return>0</return>
                </sequence>
            </if>

            <log level="'info'" message="1">
                "StopOSPL: ospl stop [%s] on [%s]."% (host.get_ospl_uri(), host.get_host_name())
            </log>

            <!-- Launch 'ospl stop' command on the host -->
            <process name="'%s %s on %s'% (host.get_ospl_command(), host.get_ospl_args_to_stop(), host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <command>
                    host.get_ospl_command()
                </command>
                <parms>
                    host.get_ospl_args_to_stop()
                </parms>
                <workdir>
                    host.get_ospl_log_dir()
                </workdir>
                <envs>
                    host.get_host_env()
                </envs>
                <stderr mode="'stdout'"/>
                <returnstdout/>
                <focus mode="'minimized'"/>
            </process>

           <!-- Check -->
            <if expr="RC != 0 or STAFResult != None">
                <sequence>
                    <script>
                        err_msg = "StopOSPL: [%s %s] failed on [%s] with result [%s] [%s]."%\
                                  (host.get_ospl_command(),
                                   host.get_ospl_args_to_stop(),
                                   host.get_host_name(),
                                   RC,
                                   STAFResult)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "OSPLDidNotStopped"]</call>
                </sequence>
            </if>

            <!-- Call 'ospl status' command to check if the daemon is still running -->
            <sequence>
                <timer duration="'3s'">
                    <loop until="STAXResult == 0">
                        <call function="'OSPLIsRunning'">host</call>
                    </loop>
                </timer>
                <if expr="STAXResult == 1">
                    <sequence>
                        <script>
                            err_msg = "StopOSPL: ospl stop %s - domain still running 30s after stop on [%s]."%\
                                      (host.get_ospl_uri(), host.get_host_name())
                        </script>
                        <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "OSPLDidNotStopped"]</call>
                    </sequence>
                </if>
            </sequence>

            <return>0</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="OSPLIsRunning" scope="local">
        <function-prolog>
            <![CDATA[
            Checks to see if OpenSplice is (already/now) running on a host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Calls "ospl status" for the specified domain URI
            and returns "True" if the daemon is found running.
            ]]>
        </function-epilog>

        <function-single-arg>
            <function-required-arg name="host">
                Which host to check.
            </function-required-arg>
        </function-single-arg>

        <sequence>
            <!-- Launch 'ospl status' command on the host -->
                    <log level="'info'" message="1">
                        "calling ospl status [%s] with [%s]."%\
                        (host.get_ospl_command(), host.get_ospl_args_to_status())
                    </log>
            <process name="'%s %s on %s'% (host.get_ospl_command(), host.get_ospl_args_to_status(), host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <command>
                    host.get_ospl_command()
                </command>
                <parms>
                    host.get_ospl_args_to_status()
                </parms>
                <workdir>
                    host.get_ospl_log_dir()
                </workdir>
                <envs>
                    host.get_host_env()
                </envs>
                <stderr mode="'stdout'"/>
                <returnstdout/>
                <focus mode="'minimized'"/>
            </process>

            <!-- Check -->
            <if expr="STAFResult != None">
                <sequence>
                    <script>
                        err_msg = "OSPLIsRunning: [%s %s] failed on [%s] with result [%s] [%s]"%\
                                  (host.get_ospl_command(),
                                   host.get_ospl_args_to_status(),
                                   host.get_host_name(),
                                   RC,
                                   STAFResult)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                </sequence>
            </if>

            <!--
                RC == 0 when 'ospl status' found the ospl domain
                STAXResult[0][1] - contains 'ospl status' stdoutput. It is empty when no OSPL with the URI found.
            -->
                    <log level="'info'" message="1">
                        "calling ospl status RC [%s] with STAXResult [%s]."%\
                        (RC, STAXResult[0][1])
                    </log>
            <return>(RC == 0 and STAXResult[0][1] != "")</return>
        </sequence>
    
</function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="ShowErrorMsgAndThrowException" scope="local">
        <function-prolog>
            <![CDATA[
            Print the error message using 'error' level.
            And throw the 'ProcessNoWorkyError' exception.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="err_msg">
                The message to be printed.
            </function-required-arg>
            <function-optional-arg name="stax_result" default="None">
                STAXResult to be printed.
            </function-optional-arg>
            <function-optional-arg name="the_exception" default="'ProcessNoWorkyError'">
                STAXResult to be printed.
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <!-- Print the error message -->
            <call function="'ShowErrorMsg'">[err_msg, stax_result]</call>
            <!-- Throw the execption -->
            <throw exception="the_exception">err_msg</throw>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="ShowErrorMsg" scope="local">
        <function-prolog>
            <![CDATA[
            Print the error message using 'error' level.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="err_msg">
                The message to be printed.
            </function-required-arg>
            <function-optional-arg name="stax_result" default="None">
                STAXResult to be printed.
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <!-- Print error message -->
            <log level="'error'" message="1">err_msg</log>
            <!-- Print STAX result -->
            <if expr="stax_result != None">
                <iterate var="file_info" in="stax_result" indexvar="i">
                        <sequence>
                            <log level="'error'">file_info</log>
                        </sequence>
                </iterate>
            </if>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="PASS-if-0" scope="local">
        <function-prolog>
            <![CDATA[
            This function checks if a value is 0.
            If 0, it sets the testcase status result to 'pass';
            Otherwise, it sets it to 'fail' and sends a message to the STAXMonitor.
            ]]>
        </function-prolog>

        <function-single-arg>
            <function-required-arg name="value">
                Value to compare with 0
            </function-required-arg>
        </function-single-arg>

        <if expr="value == 0">
            <tcstatus result="'pass'"/>
            <else>
                <tcstatus result="'fail'">
                    "Value=%d. Expected 0."% value
                </tcstatus>
            </else>
        </if>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="RunProcess" scope="local">
        <function-prolog>
            <![CDATA[
            Runs a process on a host 'synchronously'.
            Process should be expected to complete within a reasonable time.
            Will timeout otherwise. Optional timeout can be specified.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Will return process return code on successful completion.
            Will throw an exception if it times out or cannot be run for some reason.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host to run the process on.
            </function-required-arg>
            <function-required-arg name="process">
                The process instance that should be run.
            </function-required-arg>
            <function-optional-arg name="timeout" default="'60s'">
                A timeout to wait for the process to complete.
            </function-optional-arg>
            <function-optional-arg name="throw_if_err" default="1">
                A timeout to wait for the process to complete.
            </function-optional-arg>
        </function-list-args>

        <sequence>
            <log level="'info'" message="1">
                "RunProcess: Running [%s %s] on [%s]."%\
                (process.get_command(),
                 process.get_args(),
                 host.get_host_name())
            </log>

            <!-- Start with the specified duration -->
            <timer duration="timeout">
                <sequence>
                    <process name="'%s %s on %s'% (process.get_command(), process.get_args(), host.get_staf_url())">
                        <location>
                            host.get_staf_url()
                        </location>
                        <command>
                            process.get_command()
                        </command>
                        <parms>
                            process.get_args()
                        </parms>
                        <workdir>
                            process.get_working_dir()
                        </workdir>
                        <envs>
                            host.get_host_env()
                        </envs>
                        <stdout>
                            process.get_log_file()
                        </stdout>
                        <stderr mode="'stdout'"/>
                        <returnstdout/>
                        <focus mode="'minimized'"/>
                    </process>

                    <!-- Check -->
                    <if expr="RC != 0 or STAFResult != None">
                        <if expr="throw_if_err == 1">
                            <sequence>
                                <script>
                                    err_msg = "RunProcess: [%s %s] failed on [%s] with result [%s] [%s] [%s]"%\
                                              (process.get_command(),
                                               process.get_args(),
                                               host.get_host_name(),
                                               RC,
                                               STAFResult,
                                               STAXResult)
                                </script>
                                <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "RunningProcessError"]</call>
                            </sequence>
                            <else>
                                <return>RC</return>
                            </else>
                        </if>
                    </if>
                 </sequence>
            </timer>

            <!-- Check if process is timed out -->
            <if expr="RC == 1">
                <sequence>
                    <script>
                        warn_msg = "RunProcess: [%s %s] timed out on [%s] after [%s]."%\
                                   (process.get_command(),
                                    process.get_args(),
                                    host.get_host_name(),
                                    timeout)
                    </script>
                    <log level="'warning'" message="1">warn_msg</log>
                </sequence>
            </if>
            <return>RC</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="GetEnv" scope="local">
        <function-prolog>
            <![CDATA[
            Gets an environment value from a host
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Returns the variable value or empty string if it can't be resoved on the box.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                Which host to request the variable from.
            </function-required-arg>
            <function-required-arg name="variable_name">
                The environment variable name required.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <stafcmd>
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "VAR"
                </service>
                <request>
                    "RESOLVE STRING {STAF/Env/%s}"% variable_name
                </request>
            </stafcmd>

            <!-- If the STAF command request successfully passed then return the value -->
            <if expr="RC == 0">
                <sequence>
                    <return>STAFResult</return>
                </sequence>
            </if>
          <return>""</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="InitHost" scope="local">
        <function-prolog>
            <![CDATA[
            Initialise required data values of a particular host.
            This will query the host for system variables and determine the
            required environment variables for a particular OSPL_HOME on that host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            This only needs doing once per host but it shouldn't do any harm
            if it's repeated. Other than contributing to general patience trying.
            ]]>
        </function-epilog>

        <function-single-arg>
            <function-required-arg name="host">
                The host that should be initialised.
            </function-required-arg>
        </function-single-arg>

        <sequence>
            <!-- Imports STAF configuration variables on the specified machine -->
            <call function="'STAXUtilImportSTAFConfigVars'">host.get_staf_url()</call>
            <script>[RC, config_map, error_list] = STAXResult</script>
            <if expr="RC == 0">
                <script>
                    host.set_config_map(config_map)
                </script>
                <else>
                    <sequence>
                        <log level="'error'" message="1">
                            "InitHost: Unable to access configuration of the host [%s] because [%s]."%\
                            (host.get_host_name(), error_list)</log>
                        <throw exception="'InitialisationError'">error_list</throw>
                    </sequence>
                </else>
            </if>

            <!-- If OSPL_HOME set try and get the required test environment -->
            <if expr="host.get_ospl_home() != None">
                <sequence>
                    <script>
                        # Check on empty ext-n and name of release script
                        if host.get_release_script_name() == "":
                            release_script_name = "release"
                            host.set_release_script_name(release_script_name)
                        if host.get_release_script_ext() == "":
                            release_script_ext = "com"
                            if host.is_windows():
                                release_script_ext = "bat"
                            host.set_release_script_ext(release_script_ext)
                    </script>
                    <!-- Find OSPL release script -->
                    <call function="'STAXUtilListDirectory'">
                        {"machine"   : host.get_staf_url(),
                         "directory" : host.get_ospl_home(),
                         "name"      : host.get_release_script_name(),
                         "ext"       : host.get_release_script_ext()}
                    </call>
                    <script>[RC, result] = STAXResult</script>
                    <!-- Check -->
                    <if expr="RC != 0">
                        <sequence>
                            <log level="'error'" message="1">
                                "InitHost: Unable to access directory [%s] on the host [%s]"%\
                                (host.get_ospl_home(), host.get_host_name())
                            </log>
                            <throw exception="'InitialisationError'"></throw>
                        </sequence>
                    </if>
                    <script>file_list = result</script>
                    <if expr="not file_list">
                        <sequence>
                            <log level="'error'" message="1">
                                "InitHost: Unable to find the OSPL release script [%s.%s] in [%s] on the host [%s]"%\
                                (host.get_release_script_name(), host.get_release_script_ext(), host.get_ospl_home(), host.get_host_name())
                            </log>
                            <throw exception="'InitialisationError'"></throw>
                        </sequence>
                    </if>

                    <call function="'PatchReleaseScript'">host</call>

                    <script>release_script = file_list[0]</script>
                    <!--
                    Get the environment on the box running the release script.
                    We call release.bat/com and capture the output of set afterwords
                    then remove anything without an = in it
                    -->
                    <sequence>

                        <process name="'Running [%s] on [%s] to get OSPL environment'% (release_script, host.get_staf_url())">
                            <location>
                                host.get_staf_url()
                            </location>
                            <command mode="'shell'">
                                "%s%s%s"% (host.get_ospl_home(),
                                           host.get_file_sep(),
                                           release_script)
                            </command>
                            <workdir>
                                host.get_ospl_home()
                            </workdir>
                            <stderr mode="'stdout'"/>
                            <returnstdout/>
                            <focus mode="'minimized'"/>
                        </process>

                        <if expr="RC != 0 or STAFResult != None">
                            <sequence>
                                <script>
                                    err_msg = "InitHost: running [%s%s%s] failed on [%s] with result [%s] [%s]."%\
                                              (host.get_ospl_home(),
                                               host.get_file_sep(),
                                               release_script,
                                               host.get_host_name(),
                                               RC,
                                               STAFResult)
                                </script>
                                <call function="'ShowErrorMsg'">[err_msg, STAXResult]</call>
                            </sequence>
                            <elseif expr="STAXResult != None">
                                <sequence>
                                    <iterate var="file_info" in="STAXResult" indexvar="i">
                                        <if expr="file_info[0] == 0">
                                            <sequence>
                                                <script>
                                                    all_lines = file_info[1].splitlines()
                                                    host_env  = []

                                                    for next_line in all_lines:
                                                        if next_line.find("=") == -1:
                                                            continue
                                                        if next_line.find("OSPL_URI=") != -1:
                                                            if host.get_ospl_uri() == "":
                                                                host.set_ospl_uri(next_line.replace("OSPL_URI=", ""))
                                                        if (next_line.find("OSPL") == -1 and next_line.find("PATH") == -1 and next_line.find("Path") == -1 and next_line.find("JAVA_HOME") == -1 and next_line.find("TAO_ROOT") == -1):
                                                            continue
                                                        host_env.append(next_line)
                                                    host.set_host_env(host_env)
                                                </script>
                                            </sequence>
                                            <else>
                                                <call function="'ShowErrorMsg'">["InitHost: Retrieval of file [%s] failed with RC [%s]"% (i, file_info[0])]</call>
                                            </else>
                                        </if>
                                    </iterate>
                                </sequence>
                            </elseif>
                            <else>
                                <call function="'ShowErrorMsg'">["InitHost: STAXResult is None"]</call>
                            </else>
                        </if>
                    </sequence>
                    <call function="'UnPatchReleaseScript'">host</call>
                </sequence>
                <else>
                    <!--
                        The machine environment & path has been set up manually.
                        We need to get a value
                    -->
                    <sequence>
                        <call function="'GetEnv'">[host, "OSPL_URI"]</call>
                        <script>
                            if STAXResult != "":
                                host.set_ospl_uri(STAXResult)
                        </script>
                    </sequence>
                </else>
            </if>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="PatchReleaseScript" scope="local">
        <function-prolog>
            <![CDATA[
            Check that the release script has had the
            @@INSTALLDIR@@ token removed and is executable.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Will replace the token and apply the permission if not.
            ]]>
        </function-epilog>

        <function-single-arg>
            <function-required-arg name="host">
                Which host to path the relase script on.
            </function-required-arg>
        </function-single-arg>

        <sequence>
            <script>
                # Check on empty ext-n and name of release script
                if host.get_release_script_name() == "":
                    release_script_name = "release"
                    host.set_release_script_name(release_script_name)
                if host.get_release_script_ext() == "":
                    release_script_ext = "com"
                    if host.is_windows():
                        release_script_ext = "bat"
                    host.set_release_script_ext(release_script_ext)
                ext = host.get_release_script_ext()
                release_script = "%s%s%s.%s"% (host.get_ospl_home(), host.get_file_sep(), host.get_release_script_name(), ext)
            </script>
<!--
            <message>
                "Patching [%s] on [%s]"% (release_script, host.get_host_name())
            </message>
-->
            <stafcmd name="'Read file contents of [%s]'% (release_script)">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "FS"
                </service>
                <request>
                    "GET FILE %s TEXT FORMAT UNIX"% release_script
                </request>
            </stafcmd>

            <if expr="RC == 0">
                <sequence>
                    <script>
                        # Get content:
                        script_content = STAFResult

                        # Replace template token by the host OSPL_HOME value:
                        script_content = script_content.replace("@@INSTALLDIR@@", host.get_ospl_home())

                        # Add 'set' command to the end of file to get all environment:
                        comment = "#"
                        if host.is_windows():
                            comment = "REM"
                        comment += " Temporary add this command:"

                        script_content += "%s%s%sset"% (host.get_line_sep(), comment, host.get_line_sep())

                        new_script_name = ("tmp_release.%s"% ext)

                        import os
                        file = open(new_script_name, "w")
                        file.write(script_content)
                        file.close()

                        # Don't set FORMAT to WINDOWS even if the target machone is Windows family:
                        request = "COPY FILE %s TOFILE %s TOMACHINE %s TEXT FORMAT UNIX"%\
                                  (new_script_name,
                                   release_script,
                                   host.get_staf_url())
                    </script>
                    <call function="'STAF'">[STAXCurrentXMLMachine, "FS", request]</call>

                    <script>
                        os.remove(new_script_name)
                    </script>

                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                err_msg = "PatchReleaseScript: failed writing file [%s] with result [%s] [%s]."%\
                                         (release_script,
                                         RC,
                                         STAFResult)
                            </script>
                            <call function="'ShowErrorMsg'">[err_msg]</call>
                        </sequence>
                    </if>

                    <if expr="not host.is_windows()">
                        <process name="'chmod +x %s on [%s]'% (release_script, host.get_staf_url())">
                            <location>
                                host.get_staf_url()
                            </location>
                            <command mode="'shell'">
                                "chmod"
                            </command>
                            <parms>
                                "+wx %s"% release_script
                            </parms>
                            <workdir>
                                host.get_ospl_home()
                            </workdir>
                        </process>
                    </if>

                </sequence>
                <else>
                    <sequence>
                        <script>
                            err_msg = "PatchReleaseScript: failed to get file [%s] from the host [%s] with result [%s] [%s]."%\
                                                     (release_script,
                                                      host.get_host_name(),
                                                      RC,
                                                      STAFResult)
                        </script>
                        <call function="'ShowErrorMsg'">[err_msg]</call>
                    </sequence>
                </else>
            </if>
        </sequence>
  </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="UnPatchReleaseScript" scope="local">
        <function-prolog>
            <![CDATA[
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            ]]>
        </function-epilog>

        <function-single-arg>
            <function-required-arg name="host">
                Which host to unpath the relase script on.
            </function-required-arg>
        </function-single-arg>

        <sequence>

            <sequence>
                <script>
                    # Check on empty ext-n and name of release script
                    if host.get_release_script_name() == "":
                        release_script_name = "release"
                        host.set_release_script_name(release_script_name)
                    if host.get_release_script_ext() == "":
                        release_script_ext = "com"
                        if host.is_windows():
                            release_script_ext = "bat"
                        host.set_release_script_ext(release_script_ext)
                    ext = host.get_release_script_ext()
                    release_script = "%s%s%s.%s"% (host.get_ospl_home(), host.get_file_sep(), host.get_release_script_name(), ext)
                </script>
<!--
                <message>
                    "UnPatching [%s] on [%s]"% (release_script, host.get_host_name())
                </message>
-->
                <stafcmd name="'Read file contents of [%s]'% (release_script)">
                    <location>
                        host.get_staf_url()
                    </location>
                    <service>
                        "FS"
                    </service>
                    <request>
                        "GET FILE %s TEXT FORMAT UNIX"% release_script
                    </request>
                </stafcmd>

                <if expr="RC == 0">
                    <sequence>
                        <script>
                            # Remove 'set' command to the end of file to get all environment:
                            comment = "#"
                            if host.is_windows():
                                comment = "REM"
                            comment += " Temporary add this command:"
                            string_to_remove = "%s%s%sset"% (host.get_line_sep(), comment, host.get_line_sep())

                            script_content = STAFResult.replace(string_to_remove, "")

                            tmp_script_name = "./tmp_release." + ext

                            import os
                            file = open(tmp_script_name, "w")
                            file.write(script_content)
                            file.close()

                            request = "COPY FILE %s TOFILE %s TOMACHINE %s TEXT FORMAT UNIX"%\
                                      (tmp_script_name,
                                      release_script,
                                      host.get_staf_url())
                        </script>
                        <call function="'STAF'">[STAXCurrentXMLMachine, "FS", request]</call>

                        <script>
                            os.remove(tmp_script_name)
                        </script>

                        <if expr="RC != 0">
                            <sequence>
                                <script>
                                    err_msg = "UnPatchReleaseScript: failed writing file [%s] with result [%s] [%s]."%\
                                              (release_script,
                                              RC,
                                              STAFResult)
                                </script>
                                <call function="'ShowErrorMsg'">[err_msg]</call>
                            </sequence>
                        </if>
                    </sequence>
                    <else>
                        <sequence>
                            <script>
                                err_msg = "UnPatchReleaseScript: failed to get file [%s] from the host [%s] with result [%s] [%s]."%\
                                          (release_script,
                                          host.get_host_name(),
                                          RC,
                                          STAFResult)
                            </script>
                            <call function="'ShowErrorMsg'">[err_msg]</call>
                        </sequence>
                    </else>
                </if>
            </sequence>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="CopyProcessLogToHost" scope="local">
        <function-prolog>
            <![CDATA[
            Manually retrieves process's logs.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Retrieves the stdout & stdin output file created by the process
            from the remote machine back to the monitoring node.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="source_host">
                The host instance with the process.
            </function-required-arg>
            <function-required-arg name="dest_host">
                The host instance where log will be copied.
            </function-required-arg>
            <function-required-arg name="process">
                The process instance that we need the logs for.
            </function-required-arg>
            <function-required-arg name="dest_folder">
                Where process log will be stored on the dest host.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <message>
                "Copying [%s] from [%s] to [%s/%s]"% (process.get_log_file(),
                                                      source_host.get_host_name(),
                                                      dest_host.get_host_name(),
                                                      dest_folder)
            </message>
    
            <!-- Create folder for storing the log if it doesn't exist on the dest host -->
            <script>
                request = "CREATE DIRECTORY %s FULLPATH"% dest_folder
            </script>
            <call function="'STAF'">[dest_host.get_staf_url(), "FS", request]</call>
            <script>[RC, result] = STAXResult</script>

            <if expr="RC != 0">
                <sequence>
                    <script>
                        err_msg = "CopyProcessLogToHost: failed create folder [%s] on [%s] with result [%s] [%s]"%\
                        (dest_folder,
                         dest_host.get_host_name(),
                         rc,
                         result)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                </sequence>
            </if>

            <!-- Copy the process log from the source host to the dest -->
            <script>
                dest_log_file      = process.get_log_file()[process.get_log_file().rfind(source_host.get_file_sep()) + 1:]
                dest_log_file_path = "%s%s%s"% (dest_folder, dest_host.get_file_sep(), dest_log_file)
                request = "COPY FILE %s TOFILE %s TOMACHINE %s"%\
                          (process.get_log_file(),
                           dest_log_file_path,
                           dest_host.get_staf_url())
            </script>
            <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>

            <if expr="RC != 0">
                <sequence>
                    <script>
                        err_msg = "CopyProcessLogToHost: Copy log for [%s] from [%s] to [%s] failed with result [%s] [%s]"%\
                                  (process.get_command(),
                                   source_host.get_host_name(),
                                   dest_host.get_host_name(),
                                   RC,
                                   result)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                </sequence>
            </if>
        </sequence>
  </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="SpawnProcess" scope="local">
        <function-prolog>
            <![CDATA[
            Asynchronously spawns a process without waiting for it to complete
            and returns the handle to the user & stores it on the passed process.
            ]]>
        </function-prolog>

        <function-epilog>
            <![CDATA[
            Will throw an exception if the process fails to start.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host to run the process on.
            </function-required-arg>
            <function-required-arg name="process">
                The process instance that should be run.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <script>
                request = "START SHELL COMMAND %s"% process.get_command()

                if process.get_args() != "":
                    request += " PARMS %s"% process.get_args()

                request += " FOCUS Minimized"

                for env in host.get_host_env():
                    if env != "":
                        request += " ENV %s"% env

                if process.get_working_dir() != "":
                    request += " WORKDIR %s"% process.get_working_dir()

                if process.get_log_file() != "":
                    request += " STDOUT %s STDERRTOSTDOUT"% process.get_log_file()

                #request += " NOTIFY ONEND KEY %d"% process.get_id()
            </script>

            <log level="'info'" message="1">
                "SpawnProcess: Starting [%s] on [%s]"% (process.get_command(), host.get_host_name())
            </log>

            <stafcmd name="'Start [%s] on [%s]'% (process.get_command(), host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "PROCESS"
                </service>
                <request>
                    request
                </request>
            </stafcmd>

          <if expr="RC != 0">
            <sequence>
                <script>
                    err_msg = "SpawnProcess: Starting [%s] on [%s] failed with result [%s] [%s]"%\
                              (process.get_command(),
                               host.get_host_name(),
                               RC,
                               STAFResult)
                </script>
                <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "RunningProcessError"]</call>
            </sequence>
                <else>
                    <sequence>
                        <script>
                            process.set_handle(STAFResult)
                        </script>
                        <log level="'info'" message="1">
                            "SpawnProcess: Started [%s] on [%s] with handle [%s]"% (process.get_command(), host.get_host_name(), process.get_handle())
                        </log>
                        <return>RC</return>
                    </sequence>
                </else>
            </if>
            <return>-1</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="TerminateProcess" scope="local">
        <function-prolog>
            <![CDATA[
            Check an asynchronously started process has completed successfully
            with return code 0. Terminate it if it hasn't.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Will record an error and return the process RC
            if it hadn't terminated itself and returned 0.
            Will free handle resources in at all possible.
            Will only throw exception if the STAF service cannot be contacted.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host to run the process on.
            </function-required-arg>
              <function-required-arg name="process">
                The process instance you want to check and stop.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <log level="'info'" message="1">
                "TerminateProcess: Stopping [%s] with handle [%s] on [%s] "% (process.get_command(), process.get_handle(), host.get_host_name())
            </log>

            <if expr="process.get_handle() == 0">
                <return>0</return>
            </if>

            <script>
                request = "QUERY HANDLE %s"% process.get_handle()
            </script>

            <!-- Check for process exit information and std / out error -->
            <stafcmd name="'Peek at event queue for [%s] on [%s] process exit'% (process.get_command(), host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "QUEUE"
                </service>
                <request>
                    "PEEK ALL"
                </request>
            </stafcmd>

            <stafcmd name="'Check [%s] completed.'% process.get_command()">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "PROCESS"
                </service>
                <request>
                    request
                </request>
            </stafcmd>

            <if expr="RC != STAFRC.Ok">
                <sequence>
                    <script>
                        err_msg = "TerminateProcess: Checking [%s] on [%s] failed with result [%s] [%s]"%\
                                  (process.get_command(),
                                   host.get_host_name(),
                                   RC,
                                   STAFResult)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                </sequence>
                <else>
                    <sequence>
                        <if expr="STAFResult['rc'] == None">
                            <sequence>
                                <script>return_code = 0</script>

                                <log level="'info'" message="1">
                                    "Terminating: %s"% process.get_command()
                                </log>

                                <stafcmd name="'Terminate [%s]'% process.get_command()">
                                    <location>
                                        host.get_staf_url()
                                    </location>
                                    <service>
                                        "PROCESS"
                                    </service>
                                    <request>
                                        "STOP HANDLE %s"% process.get_handle()
                                    </request>
                                </stafcmd>

                            </sequence>
                            <elseif expr="STAFResult['rc'] == '0'">
                                <script>return_code = 0</script>
                            </elseif>
                            <else>
                                <script>return_code = -1</script>
                            </else>
                        </if>
                    </sequence>
                </else>
            </if>

            <!-- Check for process exit information and std / out error -->
            <stafcmd name="'Peek at event queue for [%s] on [%s] process exit'% (process.get_command(), host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "QUEUE"
                </service>
                <request>
                    "PEEK ALL"
                </request>
            </stafcmd>

            <if expr="RC == 0">
                <if expr="STAFResult != None">
                    <iterate var="event_record" in="STAFResult">
                         <log level="'info'">event_record</log>
                    </iterate>
                </if>
            </if>

            <stafcmd name="'Free resources from [%s]'% process.get_command()">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "PROCESS"
                </service>
                <request>
                    "FREE HANDLE %s"% process.get_handle()
                </request>
            </stafcmd>

          <return>return_code</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="CreateLogDirOnHost" scope="local">
        <function-prolog>
            <![CDATA[
            Create log directory on the host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Will create the directory on the host.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host to create the directory on.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <!-- If params are Ok -->
            <if expr="host != None">
                <sequence>
                    <message>
                        "Creating directory [%s] on [%s]."% (host.get_log_dir(), host.get_host_name())
                    </message>

                    <!-- Prepare the STAF request to create directory on the host -->
                    <script>
                        request = "CREATE DIRECTORY %s FULLPATH"% host.get_log_dir()
                    </script>
                    <!-- Make request -->
                    <call function="'STAF'">[host.get_staf_url(), "FS", request]</call>
                    <!-- Get resul -->
                    <script>[RC, result] = STAXResult</script>

                    <return>(RC == 0)</return>
                </sequence>
            </if>

            <return>-1</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="SetEnvsOnHostByScript" scope="local">

        <function-prolog>
            <![CDATA[
            Define host environment variables by a shell script.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host instance.
            </function-required-arg>
            <function-required-arg name="script_name">
                The host instance to copy to.
            </function-required-arg>
        </function-list-args>

        <sequence>

            <stafcmd name="'Read file contents of [%s]'% script_name">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "FS"
                </service>
                <request>
                    "GET FILE %s TEXT FORMAT UNIX"% script_name
                </request>
            </stafcmd>

            <if expr="RC == 0">
                <sequence>
                    <script>
                        # Get content:
                        script_content = STAFResult

                        # Add 'set' command to the end of file to get all environment:
                        comment = "#"
                        if host.is_windows():
                            comment = "REM"
                        comment += " Temporary add this command:"

                        script_content += "%s%s%sset"% (host.get_line_sep(), comment, host.get_line_sep())

                        new_script_name = ("tmp_" + script_name[script_name.rfind(host.get_file_sep()) + 1:])

                        import os
                        file = open(new_script_name, "w")
                        file.write(script_content)
                        file.close()

                        # Don't set FORMAT to WINDOWS even if the target machone is Windows family:
                        request = "COPY FILE %s TOFILE %s TOMACHINE %s TEXT FORMAT UNIX"%\
                            (new_script_name,
                             script_name,
                            host.get_staf_url())
                    </script>
                    <call function="'STAF'">[STAXCurrentXMLMachine, "FS", request]</call>

                    <script>
                        os.remove(new_script_name)
                    </script>

                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                err_msg = "SetEnvsOnHostByScript: failed writing file [%s] with result [%s] [%s]."%\
                                    (script_name,
                                    RC,
                                    STAFResult)
                            </script>
                            <call function="'ShowErrorMsg'">[err_msg]</call>
                            <return>RC</return>
                        </sequence>
                    </if>
                </sequence>
                <else>
                    <sequence>
                        <script>
                            err_msg = "SetEnvsOnHostByScript: failed to get file [%s] from the host [%s] with result [%s] [%s]."%\
                                (script_name,
                                host.get_host_name(),
                                RC,
                                STAFResult)
                        </script>
                        <call function="'ShowErrorMsg'">[err_msg]</call>
                        <return>RC</return>
                    </sequence>
                </else>
            </if>
            
            <if expr="not host.is_windows()">
                <!-- Do a "chmod +x" on the file in case it's not been done -->
                <process name="'chmod +x %s on [%s]'% (script_name, host.get_staf_url())">
                    <location>
                        host.get_staf_url()
                    </location>
                    <command mode="'shell'">
                        "chmod"
                    </command>
                    <parms>
                        "+x %s"% script_name
                    </parms>
                    <workdir>
                        host.get_ospl_home()
                    </workdir>
                </process>
            </if>

            <process name="'Running [%s] on [%s] to get environment'% (script_name, host.get_staf_url())">
                <location>
                    host.get_staf_url()
                </location>
                <command mode="'shell'">
                    script_name
                </command>
                <stderr mode="'stdout'"/>
                <returnstdout/>
                <focus mode="'minimized'"/>
            </process>

            <if expr="RC != 0 or STAFResult != None">
                <sequence>
                    <script>
                        err_msg = "SetEnvsOnHostByScript: running [%s] failed on [%s] with result [%s] [%s]."%\
                        (script_name,
                         host.get_host_name(),
                         RC,
                         STAFResult)
                    </script>
                    <call function="'ShowErrorMsg'">[err_msg, STAXResult]</call>
                    <return>RC</return>
                </sequence>
                <elseif expr="STAXResult != None">
                    <sequence>
                        <iterate var="file_info" in="STAXResult" indexvar="i">
                            <if expr="file_info[0] == 0">
                                <sequence>
                                    <script>
                                        all_lines = file_info[1].splitlines()
                                        host_env = []

                                        for next_line in all_lines:
                                            if next_line.find("=") == -1:
                                                continue
                                            host_env.append(next_line)

                                        host.set_host_env(host_env)
                                    </script>
                                </sequence>
                                <else>
                                    <call function="'ShowErrorMsg'">["SetEnvsOnHostByScript: Retrieval of file [%s] failed with RC [%s]"% (i, file_info[0])]</call>
                                </else>
                            </if>
                        </iterate>
                    </sequence>
                </elseif>
                <else>
                    <call function="'ShowErrorMsg'">["SetEnvsOnHostByScript: STAXResult is None"]</call>
                </else>
            </if>

            <stafcmd name="'Read file contents of [%s]'% (script_name)">
                <location>
                    host.get_staf_url()
                </location>
                <service>
                    "FS"
                </service>
                <request>
                    "GET FILE %s TEXT FORMAT UNIX"% script_name
                </request>
            </stafcmd>

            <if expr="RC == 0">
                <sequence>
                    <script>
                        # Remove 'set' command:
                        comment = "#"
                        if host.is_windows():
                            comment = "REM"
                        comment += " Temporary add this command:"
                        string_to_remove = "%s%s%sset"% (host.get_line_sep(), comment, host.get_line_sep())

                        script_content = STAFResult.replace(string_to_remove, "")

                        new_script_name = "tmp_" + script_name[script_name.rfind(host.get_file_sep()) + 1:]

                        import os
                        file = open(new_script_name, "w")
                        file.write(script_content)
                        file.close()

                        request = "COPY FILE %s TOFILE %s TOMACHINE %s TEXT FORMAT UNIX"%\
                            (new_script_name,
                            script_name,
                            host.get_staf_url())
                    </script>
                    <call function="'STAF'">[STAXCurrentXMLMachine, "FS", request]</call>

                    <script>
                        os.remove(new_script_name)
                    </script>

                    <if expr="RC != 0">
                        <sequence>
                            <script>
                                err_msg = "SetEnvsOnHostByScript: failed writing file [%s] with result [%s] [%s]."%\
                                    (script_name,
                                    RC,
                                    STAFResult)
                            </script>
                            <call function="'ShowErrorMsg'">[err_msg]</call>
                        </sequence>
                    </if>
                </sequence>
                <else>
                    <sequence>
                        <script>
                            err_msg = "SetEnvsOnHostByScript: failed to get file [%s] from the host [%s] with result [%s] [%s]."%\
                                (script_name,
                                host.get_host_name(),
                                RC,
                                STAFResult)
                        </script>
                        <call function="'ShowErrorMsg'">[err_msg]</call>
                    </sequence>
                </else>
            </if>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="CopyFileFromTo" scope="local">
        <function-prolog>
            <![CDATA[
            Copy defined file from one host to another.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Copies the file from source host to the dest host to the defined folder.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="source_host">
                The host instance to copy from.
            </function-required-arg>
            <function-required-arg name="dest_host">
                The host instance to copy to.
            </function-required-arg>
            <function-required-arg name="file_name">
                The file name to copy.
            </function-required-arg>
            <function-required-arg name="dest_folder">
                Where file will be stored on the dest host.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <message>
                "Copying file [%s] from host [%s] to host [%s] in folder [%s]"%\
                    (file_name,
                                                      source_host.get_host_name(),
                                                      dest_host.get_host_name(),
                                                      dest_folder)
            </message>
    
            <!-- Create folder for storing the file if it doesn't exist on the dest host -->
            <script>
                request = "CREATE DIRECTORY %s FULLPATH"% dest_folder
            </script>
            <call function="'STAF'">[dest_host.get_staf_url(), "FS", request]</call>
            <script>[RC, result] = STAXResult</script>
            <if expr="RC != 0">
                <sequence>
                    <script>
                        err_msg = "Can't create directory [%s] on host [%s] cause (%d, %s)"%\
                                  (dest_folder, dest_host.get_host_name(), RC, result)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "FileCopyFailed"]</call>
                </sequence>
            </if>

            <!-- Copy the file from the source host to the dest -->
            <script>
                dest_file      = file_name[file_name.rfind(source_host.get_file_sep()) + 1:]
                dest_file_path = "%s%s%s"% (dest_folder, dest_host.get_file_sep(), dest_file)
                request = "COPY FILE %s TOFILE %s TOMACHINE %s"%\
                          (file_name,
                           dest_file_path,
                           dest_host.get_staf_url())
            </script>
            <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>
            <if expr="RC != 0">
                <sequence>
                <sequence>
                    <script>
                        err_msg = "Can't copy file [%s] to host [%s] cause (%d, %s)"%\
                                  (file_name, dest_host.get_host_name(), RC, result)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "FileCopyFailed"]</call>
                </sequence>
                </sequence>
            </if>

            <return>dest_file_path</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="DeleteFileFrom" scope="local">
        <function-prolog>
            <![CDATA[
            Delete defined file from the host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Deletes the file from the defined host.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host instance to copy from.
            </function-required-arg>
            <function-required-arg name="file_name">
                The file name to delete.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <message>
                "Deleting [%s] from [%s]"% (file_name, host.get_host_name())
            </message>
    
            <!-- Delete the file from the host -->
            <script>
                request = "DELETE ENTRY %s CONFIRM"% file_name
            </script>
            <call function="'STAF'">[host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>
            <return>(RC == 0)</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="CopyDirFromTo" scope="local">
        <function-prolog>
            <![CDATA[
            Copy defined directory from one host to another to the defined location.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Copies the whole directory tree from source host to the dest host
            to the defined folder.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="source_host">
                The host instance to copy from.
            </function-required-arg>
            <function-required-arg name="dest_host">
                The host instance to copy to.
            </function-required-arg>
            <function-required-arg name="source_dir">
                The directory name to copy.
            </function-required-arg>
            <function-required-arg name="dest_dir">
                Where the directory tree will be stored on the dest host.
            </function-required-arg>
        </function-list-args>

        <sequence>
            <log level="'info'" message="1">
                "Copying [%s] from [%s] to [%s::%s]"% (source_dir,
                                                      source_host.get_host_name(),
                                                      dest_host.get_host_name(),
                                                      dest_dir)
            </log>
    
            <!-- Create folder for storing the file if it doesn't exist on the dest host -->
            <script>
                request = "CREATE DIRECTORY %s FULLPATH"% dest_dir
            </script>
            <call function="'STAF'">[dest_host.get_staf_url(), "FS", request]</call>
            <script>[RC, result] = STAXResult</script>
            <if expr="RC != 0">
                <sequence>
                    <return>-1</return>
                </sequence>
            </if>

            <!-- Copy the directory tree from the source host to the dest -->
            <script>
                request = "COPY DIRECTORY %s TODIRECTORY %s TOMACHINE %s RECURSE"%\
                          (source_dir,
                           dest_dir,
                           dest_host.get_staf_url())
            </script>
            <call function="'STAF'">[source_host.get_staf_url(), "FS", request]</call>
            <script>
                [RC, result] = STAXResult
            </script>
            <if expr="RC != 0">
                <sequence>
                    <log level="'info'" message="1">
                        "Copying [%s] from [%s] to [%s::%s] FAILED with result [%s] "% (source_dir,
                                                   source_host.get_host_name(),
                                                   dest_host.get_host_name(),
                                                   dest_dir,
                                                   RC)
                    </log>
                    <return>-1</return>
                </sequence>
            </if>

            <return>0</return>
        </sequence>
    </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="CreateDirOnHost" scope="local">
        <function-prolog>
            <![CDATA[
            Create directory on host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Create defined directory on host (constructing full directory tree) if not exist.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host object where directory must be created
            </function-required-arg>
            <function-required-arg name="directory">
                The directory name which must be created on defined host
            </function-required-arg>
        </function-list-args>

        <sequence>
            <log message="STAXMessageLog" level="'debug'">
                "Creating [%s] on [%s]"% (host.get_host_name(), directory)
            </log>

            <!-- Create request -->
            <script>
                request = "CREATE DIRECTORY %s FULLPATH"% directory
            </script>

            <!-- Create directory on the host -->
            <call function="'STAF'">[host.get_staf_url(), "FS", request]</call>
            <script>[RC, result] = STAXResult</script>

            <if expr="RC != 0">
                <sequence>
                    <script>
                        err_msg = "CreateDirOnHost: failed to create folder [%s] on [%s] with result [%s] [%s]"%\
                        (directory,
                         host.get_host_name(),
                         RC,
                         result)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg]</call>
                </sequence>
            </if>
        </sequence>
  </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="ChModForFileOnHost" scope="local">
        <function-prolog>
            <![CDATA[
            Change mode for defined file on defined host.
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Runs chmod for file with the mode.
            ]]>
        </function-epilog>

        <function-list-args>
            <function-required-arg name="host">
                The host object where file is stored
            </function-required-arg>
            <function-required-arg name="file_name">
                The file which mode will be changed
            </function-required-arg>
            <function-required-arg name="mode">
                The mode which will be set for the file
            </function-required-arg>
        </function-list-args>

        <sequence>

            <if expr="not host.is_windows()">
                <process name="'ChModForFileOnHost::chmod'">
                    <location>
                        host.get_staf_url()
                    </location>
                    <command mode="'shell'">
                        "chmod"
                    </command>
                    <parms>
                        "%s %s"% (mode, file_name)
                    </parms>
                </process>
            </if>

            <!-- Check -->
            <if expr="RC != 0 or STAFResult != None">
                <sequence>
                    <script>
                        err_msg = "ChModForFileOnHost: [chmod %s %s] failed on [%s] with result [%s] [%s]."%\
                                  (mode,
                                   file_name,
                                   host.get_host_name(),
                                   RC,
                                   STAFResult)
                    </script>
                    <call function="'ShowErrorMsgAndThrowException'">[err_msg, STAXResult, "ChModFailed"]</call>
                </sequence>
            </if>
        </sequence>
  </function>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <function name="GetStafLocalTcpPort" scope="local">
        <function-prolog>
            <![CDATA[
            Get local staf port
            ]]>
        </function-prolog>
        <function-epilog>
            <![CDATA[
            Get local staf port
            ]]>
        </function-epilog>
        <sequence> 
            <stafcmd name="'Get staf local tcp port'">
                <location>
                    "local"
                </location>
                <service>
                    "MISC"
                </service>
                <request>
                    "list interfaces"
                </request>
            </stafcmd>
            <if expr="RC != 0">
                <return>'6500'</return>
            </if>
            <script>
                try:
                    port = STAXResult[2].get('optionMap').get('Port')
                except:
                    port = 6503
            </script>
            <return>port</return>
        </sequence>
    </function>        
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->        
</stax>
