# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ospl_testlib
#
# $Id: prism.mpd,v 1.4 2009-05-15 09:09:51 vz Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.ospl_testlib
DEPENDENCY_FILE  = .depend.ospl_testlib

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libospl_testlib.a
LIB              = $(LIB_UNCHECKED)
LIB_NAME         = libospl_testlib

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libospl_testlib.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)


FILES = \
  TestLibsAPIC.cpp \
  TestLibsAPIS.cpp \
  tao/RemoteProcessServant.cpp \
  tao/TAOTestLibsAPIImpl.cpp \
  TestLibsAPI.cpp

VPATH = .:tao

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
override no_hidden_visibility = 1

ACE_SHLIBS = -lTAO_IORTable -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE -lddsos
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)

PRJ_TYPE = library

INSLIB ?= .
ifeq ($(INSLIB),.)
  ifeq  ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(TAO_ROOT)/include/makeinclude/prism.GNU

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/ospl_testlib
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_IORTable TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(OSPL_HOME)/lib $(ACE_ROOT)/lib /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),TAO_IORTable TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(TAO_ROOT)/include/makeinclude/macros.GNU
include $(TAO_ROOT)/include/makeinclude/rules.common.GNU
include $(TAO_ROOT)/include/makeinclude/rules.nonested.GNU
include $(TAO_ROOT)/include/makeinclude/rules.lib.GNU
include $(TAO_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L$(OSPL_HOME)/lib -L$(ACE_ROOT)/lib
else
LDFLAGS      += -L. -L$(OSPL_HOME)/lib -L$(ACE_ROOT)/lib
endif
CPPFLAGS     += -I$(OSPL_HOME)/include/sys -I$(OSPL_HOME)/include -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(TAO_ROOT)/include
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DOSPL_TESTLIBS_API_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo ospl_testlib will not be built due to the following missing library:
	@echo $(LIBCHECK)

require_warning:
	@echo ospl_testlib will not be built due to one of the following disabled make macros:
	@echo exceptions

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib
PATH              := $(PATH):$(ACE_ROOT)/lib

GENERATED_DIRTY += TestLibsAPIC.inl TestLibsAPIS.inl TestLibsAPIC.h TestLibsAPIS.h TestLibsAPIC.cpp TestLibsAPIS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) TestLibsAPI.idl -nt TestLibsAPIC.inl 2> /dev/null && $(TEST_EXE) TestLibsAPI.idl -nt TestLibsAPIS.inl 2> /dev/null && $(TEST_EXE) TestLibsAPI.idl -nt TestLibsAPIC.h 2> /dev/null && $(TEST_EXE) TestLibsAPI.idl -nt TestLibsAPIS.h 2> /dev/null && $(TEST_EXE) TestLibsAPI.idl -nt TestLibsAPIC.cpp 2> /dev/null && $(TEST_EXE) TestLibsAPI.idl -nt TestLibsAPIS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt TestLibsAPIC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt TestLibsAPIS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt TestLibsAPIC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt TestLibsAPIS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt TestLibsAPIC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt TestLibsAPIS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
TestLibsAPIC.inl TestLibsAPIS.inl TestLibsAPIC.h TestLibsAPIS.h TestLibsAPIC.cpp TestLibsAPIS.cpp: TestLibsAPI.idl $(TAO_IDL_DEP)
	$(TAO_IDL) $(TAO_IDLFLAGS) -Sa -St -Wb,export_macro=OSPL_TESTLIBS_API_Export -Wb,export_include=TestLibsAPI_export.h -Sa -St -I$(TAO_ROOT)/idl TestLibsAPI.idl

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += TestLibsAPI$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = TestLibsAPIC.cpp TestLibsAPIS.cpp tao/RemoteProcessServant.cpp tao/TAOTestLibsAPIImpl.cpp TestLibsAPI.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:TestLibsAPIC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:TestLibsAPIS.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:

